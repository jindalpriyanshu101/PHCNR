#include <a_samp>
#include <a_sampdb>
#include <mysql>
#include <a_http>
#include <required/crashdetect>
// #include <YSI\y_areas>
#include <streamer>
#include <progress>
#include <required/zcmd>
#include <required/sscanf2>
#include <required/explode>
#include <required/mSelection>
#include <required/fuckCleo>
#include <required/SII>
#include <required/formatex>
#include <required/uf>
#include <required/fixes>
#include <required/acuf>
#include <required/FloodControl>
#include <required/OPA>
#include <required/dldialog>
#include <required/line>
#include <cnr/cnr_defines>
#include <cnr/cnr_mysqlFunctions>
#include <cnr/cnr_gang>
#include <required/cnr_mysqlresponse>
#include <cnr/cnr_robberyCheckpoints>
#include <cnr/cnr_anticheat>
#include <cnr/cnr_dynamiccps>
#include <cnr/cnr_textdraws>
#include <cnr/cnr_zones>
#include <cnr/cnr_functions>
#include <cnr/cnr_rappeling>
#include <cnr/cnr_houses>
#include <cnr/cnr_admincommands>
#include <cnr/cnr_policecommands>
//#include <cnr/cnr_animatedtext>
#include <cnr/cnr_commands>
#include <cnr/cnr_jail>
// #include <cnr/cnr_businesses>
#include <cnr/cnr_animations>
#include <cnr/cnr_courier>
// #include <cnr/test>
#include <cnr/cnr_trucking>
#include <cnr/cnr_newMissions>
#include <cnr/cnr_toys>
#include <cnr/cnr_vehicles>
#include <cnr/cnr_dealership>
#include <cnr/vehicle_system>
#include <cnr/cnr_dialogresponse>
#include <cnr/cnr_explosives>
#include <cnr/cnr_moneybag>
#include <cnr/cnr_roadblocks>
#include <cnr/cnr_spike>
#include <cnr/cnr_gates>
#include <cnr/cnr_factionzones>
#include <cnr/cnr_dmevent>
#include <cnr/cnr_medic>
#include <cnr/cnr_glassevent>
#include <cnr/cnr_fallout>
#include <cnr/cnr_profiles>
#include <cnr/cnr_vehicleAC>
#include <cnr/cnr_bribe>
#include <cnr/cnr_fire>
#include <cnr/cnr_lms>
//#include <cnr/cnr_derby>
#include <cnr/cnr_cvrevent>
#include <cnr/cnr_freeevent>
#include <cnr/cnr_race>
#include <cnr/duel>
#pragma unused pFPS
#pragma unused at
#pragma unused hidden
//=======ADMINS LEVEL COLORS=======//
#define COLOR_ADMIN_1 0x009933FF
#define COLOR_ADMIN_2 0xFFAD5CFF
#define COLOR_ADMIN_3 0xFF0000FF
#define LEVEL_1_COLOR "{009933}"
#define LEVEL_2_COLOR "{009933}"
#define LEVEL_3_COLOR "{FFAD5C}"
#define LEVEL_4_COLOR "{FF0000}"
#define LEVEL_5_COLOR "{FF0000}"
#define LEVEL_6_COLOR "{FF0000}"
//========SecretCommands=======//


enum _@en@agate
{
	Float:ag_openPos[3],
	Float:ag_closePos[6],
	ag_team,
	bool:ag_status,
	ag_timer,
	ag_id
}
new gates[][_@en@agate] = {
	{{-1571.89014, 660.84381, 3.00}, {-1571.89014, 660.84381, 8.70, 0.0, 0.0, 90.00}, CLASS_POLICE, false, 0},
	{{-1628.26184, 327.47751, 3.00}, {-1628.26184, 327.47751, 8.60, 0.0, 0.0,  0.00}, CLASS_ARMY  , false, 0},
	{{-2433.40454, 496.81241, 25.0}, {-2433.40454, 496.81241, 31.4, 0.0, 0.0, 23.12}, CLASS_CIA, false, 0},
	{{ -2571.56470, 580.02917, 10.0}, { -2571.56470, 580.02917, 14.8, 0.0, 0.0, 0.0}, CLASS_FBI, false, 0}
};

main()
{
	print("\n==== | LOADING!| ====");
    print("== | COPS AND ROBBERS | ==");
    print("=== |Re-Developed By priyanshu| ===");
    print("====== | LOADED! | ======\n");
}


forward GateCheck();
public GateCheck()
{
	//Close
    for(new g=0, all=sizeof(gates); g<all; g++)
    {
        if(gates[g][ag_timer] && (gettime() > gates[g][ag_timer]))
        {
            if(gates[g][ag_status] == false)
            {
	        	gates[g][ag_timer] = 0;
				MoveObject(gates[g][ag_id], gates[g][ag_closePos][0], gates[g][ag_closePos][1], gates[g][ag_closePos][2], 8.0);
			}
		}
    }

	for(new i=0, t=GetMaxPlayers(); i<t; i++)
	{
	    if(!IsPlayerConnected(i)) continue;

	    for(new g=0, all=sizeof(gates); g<all; g++)
	    {
	        if(IsPlayerInRangeOfPoint(i, 10.0, gates[g][ag_closePos][0], gates[g][ag_closePos][1], gates[g][ag_closePos][2]))
	        {
	    		if((playerData[i][playerClass] == gates[g][ag_team]) && (gettime() > gates[g][ag_timer]))
	    		{
	    		    switch(gates[g][ag_status])
	    		    {
	    		        case false:
	    		        {
							gates[g][ag_timer] = gettime() + 4;
	    		            MoveObject(gates[g][ag_id], gates[g][ag_openPos][0], gates[g][ag_openPos][1], gates[g][ag_openPos][2], 8.0);
	    		        }
	    		    }
	    		    return 1;
	    		}
			}
		}
	 }
	 return 1;
}

public OnGameModeInit()
{
CreateObject(8478, 1823.03674, 481.70377, -0.03525,   0.00000, 0.00000, 0.00000);
CreateObject(16095, 4187.23730, -3601.36353, -8587.04590,   0.00000, 0.00000, 0.00000);
CreateObject(16095, 4086.54248, -3564.57471, -8634.93359,   0.00000, 0.00000, 0.00000);
CreateObject(16095, 4260.53516, -3138.31226, -8722.72754,   0.00000, 0.00000, 0.00000);
CreateObject(16095, 1974.00879, 689.62878, 9.78645,   0.00000, 0.00000, 0.00000);
CreateObject(16095, 1974.00354, 714.90326, 9.79868,   0.00000, 0.00000, 0.00000);
CreateObject(8843, 1925.59753, 734.22266, 9.79839,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1822.37207, 748.09723, 9.77843,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1820.32031, 772.07098, 9.79420,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1820.32031, 772.07098, 9.79420,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1820.32031, 772.07098, 9.79420,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1825.96460, 774.43854, 9.79572,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1821.31177, 728.40784, 9.73995,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1859.67664, 708.91022, 9.78812,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1824.57300, 689.27631, 9.78251,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1813.20715, 625.26489, 9.76625,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1813.20715, 625.26489, 9.76625,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1854.60583, 669.20667, 9.62874,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1868.64209, 687.12946, 9.63606,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1868.64209, 687.12946, 9.63606,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1864.51782, 722.00903, 9.64286,   0.00000, 0.00000, 0.00000);
CreateObject(8478, 1850.43115, 650.12323, 9.63194,   0.00000, 0.00000, 0.00000);
CreateObject(16151, 1966.55627, 644.55835, 10.24000,   0.00000, -4.00000, 273.00000);
CreateObject(1, 1845.86035, 627.08948, 9.79368,   0.00000, 0.00000, 0.00000);
CreateObject(8553, 1947.45007, 723.38416, 9.67160,   0.00000, 0.00000, 0.00000);
CreateObject(8553, 1948.70374, 663.49231, 9.70313,   0.00000, 0.00000, 0.00000);
CreateObject(3749, 1975.41821, 702.20563, 15.58470,   0.00000, 0.00000, 91.00000);
CreateObject(19913, 1952.11597, 763.29529, 15.22170,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1902.23706, 763.30548, 15.21030,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1877.26782, 738.25983, 15.17200,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1952.41162, 643.23199, 15.22320,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1977.41748, 668.22955, 13.00990,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1902.47278, 643.24182, 15.22320,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1877.40491, 668.23431, 15.22070,   0.00000, 0.00000, 90.00000);
CreateObject(19870, 11691.59277, 2466.95215, 259.32941,   0.00000, 0.00000, 0.00000);
CreateObject(980, 2012.58008, 700.54236, 14.16868,   0.00000, 0.00000, 0.00000);
CreateObject(1374, 1877.59009, 700.19482, 10.26750,   0.00000, 0.00000, 0.00000);
CreateObject(14781, 1880.18079, 747.72327, 10.86100,   0.00000, 0.00000, 0.00000);
CreateObject(14449, 1918.76062, 760.92261, 11.07490,   0.00000, 0.00000, 90.00000);
CreateObject(13666, 1966.82410, 748.39471, 14.79910,   0.00000, 0.00000, 98.00000);
CreateObject(19913, 1977.36206, 738.24237, 15.15610,   0.00000, 0.00000, 90.00000);
CreateObject(16152, 1973.43616, 732.57361, 9.66602,   0.00000, 0.00000, 0.00000);
CreateObject(16152, 1967.95508, 732.46136, 9.74385,   0.00000, 0.00000, 0.00000);
CreateObject(16152, 1962.69336, 732.42627, 9.74386,   0.00000, 0.00000, 0.00000);
CreateObject(14582, 1969.40527, 656.72345, 13.31080,   0.00000, 0.00000, 0.00000);
CreateObject(2785, 1976.90894, 659.36060, 10.69660,   0.00000, 0.00000, 270.00000);
CreateObject(2754, 1976.86768, 726.02960, 10.52440,   0.00000, 0.00000, 0.00000);
CreateObject(2754, 1976.91431, 725.20117, 10.52120,   0.00000, 0.00000, 0.00000);
CreateObject(936, 1966.63953, 724.12836, 10.21480,   0.00000, 0.00000, 0.00000);
CreateObject(2297, 1960.50903, 643.42218, 9.81950,   0.00000, 0.00000, 132.00000);
CreateObject(2295, 1960.50171, 646.39966, 9.85610,   0.00000, 0.00000, -40.00000);
CreateObject(2295, 1958.33984, 646.55902, 9.83880,   0.00000, 0.00000, 30.00000);
CreateObject(1486, 1959.80542, 646.16229, 9.98870,   0.00000, 0.00000, 0.00000);
CreateObject(1486, 1959.17358, 648.17908, 10.36480,   0.00000, 84.00000, 18.00000);
CreateObject(1728, 1958.44580, 648.19659, 9.82136,   0.00000, 0.00000, 0.00000);
CreateObject(3383, 1907.96667, 762.46790, 9.81920,   0.00000, 0.00000, 180.00000);
CreateObject(1302, 1972.67773, 643.63837, 9.81360,   0.00000, 0.00000, 178.00000);
CreateObject(2219, 1966.74695, 723.98535, 10.79480,   -25.00000, 25.00000, 62.00000);
CreateObject(955, 1896.80420, 762.63721, 10.21360,   0.00000, 0.00000, 0.00000);
CreateObject(1279, 1906.68945, 762.56519, 10.88470,   0.00000, 0.00000, 0.00000);
CreateObject(1654, 1909.51416, 762.99469, 11.09170,   0.00000, 0.00000, 0.00000);
CreateObject(1550, 1906.27100, 762.49487, 10.17070,   0.00000, 18.00000, 47.00000);
CreateObject(1550, 1906.36133, 762.84821, 10.17070,   0.00000, 11.00000, 4.00000);
CreateObject(1580, 1909.32397, 762.60895, 10.85290,   0.00000, 0.00000, 0.00000);
CreateObject(2036, 1908.12183, 762.60797, 10.87570,   0.00000, 0.00000, 0.00000);
CreateObject(2034, 1908.43506, 762.17322, 10.88170,   0.00000, 0.00000, 0.00000);
CreateObject(2035, 1908.17151, 762.32385, 10.88170,   0.00000, 0.00000, 0.00000);
CreateObject(2044, 1908.85254, 762.21405, 10.88470,   0.00000, 0.00000, 0.00000);
CreateObject(2061, 1906.52930, 762.99213, 11.16370,   0.00000, 0.00000, 0.00000);
CreateObject(1676, 1877.89111, 739.93750, 11.35400,   0.00000, 0.00000, -91.00000);
CreateObject(1676, 1877.91284, 742.94330, 11.34500,   0.00000, 0.00000, -89.00000);
CreateObject(3524, 1978.27222, 708.60785, 12.77030,   0.00000, 0.00000, 76.00000);
CreateObject(3524, 1978.35083, 696.27081, 12.77030,   0.00000, 0.00000, 91.00000);
CreateObject(7073, 1943.48499, 703.78888, 32.99040,   0.00000, 0.00000, 0.00000);
CreateObject(3471, 1876.29944, 712.89929, 10.81790,   0.00000, 0.00000, 178.00000);
CreateObject(3471, 1876.34949, 693.80151, 10.81680,   0.00000, 0.00000, 178.00000);
CreateObject(2745, 1905.18274, 703.22034, 10.80030,   0.00000, 0.00000, 273.00000);
CreateObject(1327, 1992.59912, 702.10931, 10.85230,   0.00000, 0.00000, 0.00000);
CreateObject(3279, 1882.92285, 648.08472, 9.81979,   0.00000, 0.00000, 0.00000);
CreateObject(3279, 1881.75110, 759.10303, 9.77808,   0.00000, 0.00000, 0.00000);
CreateObject(3279, 1972.69165, 758.34027, 9.78140,   0.00000, 0.00000, 0.00000);
CreateObject(3928, 1926.14746, 656.32397, 9.81540,   0.00000, 0.00000, 91.00000);
CreateObject(3928, 1911.45300, 655.71405, 9.81540,   0.00000, 0.00000, 91.00000);
CreateObject(2964, 1974.61597, 647.04828, 9.77760,   0.00000, 0.00000, 91.00000);
CreateObject(338, 1973.58069, 646.72754, 10.12080,   0.00000, 25.00000, 0.00000);
CreateObject(338, 1973.58337, 646.85815, 10.12080,   0.00000, 25.00000, 0.00000);
CreateObject(3105, 1974.57300, 647.56000, 10.68580,   0.00000, 0.00000, 0.00000);
CreateObject(2995, 1974.60132, 646.97559, 10.68580,   0.00000, 0.00000, 0.00000);
CreateObject(3104, 1974.40149, 647.26538, 10.68580,   0.00000, 0.00000, 0.00000);
CreateObject(1808, 1977.18396, 648.75873, 9.82100,   0.00000, 0.00000, 273.00000);
CreateObject(1808, 1977.10266, 730.67542, 9.82110,   0.00000, 0.00000, 269.00000);
CreateObject(1256, 1992.81897, 739.79657, 10.46410,   0.00000, 0.00000, 0.00000);
CreateObject(14837, 1985.62708, 730.26886, 9.65528,   0.00000, 0.00000, 0.00000);
CreateObject(3885, 1907.39172, 703.09479, 16.59970,   0.00000, 0.00000, 0.00000);
CreateObject(3267, 1907.60791, 703.16193, 16.56070,   0.00000, 0.00000, 91.00000);
CreateObject(3787, 1901.23157, 762.46619, 10.09040,   0.00000, 0.00000, 0.00000);
CreateObject(1252, 1900.42285, 762.13330, 10.90140,   0.00000, 0.00000, 0.00000);
CreateObject(1252, 1900.36707, 762.71313, 10.90140,   0.00000, 0.00000, -4.00000);
CreateObject(1252, 1901.60376, 762.76984, 10.90140,   0.00000, 0.00000, 0.00000);
CreateObject(1252, 1901.75854, 762.13977, 10.90140,   0.00000, 0.00000, 0.00000);
CreateObject(3862, 1879.42346, 725.85797, 10.81970,   0.00000, 0.00000, 91.00000);
CreateObject(1310, 1880.20276, 724.71399, 10.61230,   -91.00000, -4.00000, 91.00000);
CreateObject(1310, 1880.17249, 725.71008, 10.61230,   -91.00000, -91.00000, 0.00000);
CreateObject(1650, 1878.19556, 740.80292, 10.13770,   0.00000, 0.00000, 0.00000);
CreateObject(1310, 1880.25012, 726.71887, 10.61230,   -91.00000, -91.00000, 0.00000);
CreateObject(1650, 1878.57654, 740.05737, 10.13770,   0.00000, 0.00000, 98.00000);
CreateObject(18259, 1937.53564, 757.12701, 11.23080,   0.00000, 0.00000, 88.00000);
CreateObject(980, 1975.84106, 702.14783, 12.54050,   0.00000, 0.00000, 93.00000);
CreateObject(3249, 1103.46118, 1211.70313, 9.78960,   0.00000, 0.00000, 180.00000);
CreateObject(14781, 1152.86865, 1206.98779, 10.89690,   0.00000, 0.00000, 0.00000);
CreateObject(14449, 1130.71228, 1206.58191, 10.95410,   0.00000, 0.00000, 90.00000);
CreateObject(18257, 1165.80078, 1225.06824, 9.80571,   0.00000, 0.00000, 0.00000);
CreateObject(16152, 1172.18481, 1260.43445, 9.61530,   0.00000, 0.00000, 0.00000);
CreateObject(16152, 1166.73279, 1260.29700, 9.61550,   0.00000, 0.00000, 0.00000);
CreateObject(16152, 1160.66492, 1260.14929, 9.61670,   0.00000, 0.00000, 0.00000);
CreateObject(1836, 1175.90320, 1299.45410, 9.80990,   0.00000, 0.00000, 269.00000);
CreateObject(1515, 1166.59412, 1304.82434, 9.80360,   0.00000, 0.00000, 270.00000);
CreateObject(1515, 1166.52405, 1308.73792, 9.80360,   0.00000, 0.00000, 270.00000);
CreateObject(1515, 1166.52539, 1307.95068, 9.80310,   0.00000, 0.00000, 270.00000);
CreateObject(2754, 1175.68213, 1318.42151, 10.66790,   0.00000, 0.00000, 0.00000);
CreateObject(2754, 1175.65649, 1279.06055, 10.66790,   0.00000, 0.00000, 0.00000);
CreateObject(1895, 1175.98523, 1303.71570, 11.81460,   0.00000, 0.00000, 273.00000);
CreateObject(2681, 1175.69861, 1307.67236, 9.81730,   0.00000, 0.00000, 272.00000);
CreateObject(2779, 1175.75732, 1306.86841, 9.81250,   0.00000, 0.00000, 271.00000);
CreateObject(2778, 1175.69214, 1308.45203, 9.81630,   0.00000, 0.00000, 270.00000);
CreateObject(16151, 1175.01099, 1248.39087, 9.97950,   0.00000, 0.00000, 0.00000);
CreateObject(1499, 1167.90552, 1362.99609, 9.81660,   0.00000, 0.00000, 0.00000);
CreateObject(936, 1166.71875, 1252.08118, 10.29130,   0.00000, 0.00000, 0.00000);
CreateObject(936, 1166.79993, 1270.17444, 10.27800,   0.00000, 0.00000, 179.00000);
CreateObject(2604, 1171.10437, 1344.72803, 10.60170,   0.00000, 0.00000, 0.00000);
CreateObject(2292, 1166.02722, 1331.96973, 9.81580,   0.00000, 0.00000, 91.00000);
CreateObject(2292, 1166.03076, 1332.91016, 9.81408,   0.00000, 0.00000, 0.00000);
CreateObject(1829, 1175.33936, 1333.76221, 10.28950,   0.00000, 0.00000, 270.00000);
CreateObject(2002, 1175.69299, 1312.34399, 9.80630,   0.00000, 0.00000, 273.00000);
CreateObject(2002, 1175.70667, 1267.07605, 9.80810,   0.00000, 0.00000, 270.00000);
CreateObject(2297, 1099.07764, 1256.36865, 9.81090,   0.00000, 0.00000, 47.00000);
CreateObject(1749, 1163.00732, 1345.31604, 11.81470,   0.00000, 0.00000, 360.00000);
CreateObject(1828, 1169.26501, 1332.24768, 9.81539,   0.00000, 0.00000, 0.00000);
CreateObject(1828, 1100.77148, 1257.27368, 9.80810,   0.00000, 0.00000, 91.00000);
CreateObject(1711, 1102.34302, 1256.14502, 9.81530,   0.00000, 0.00000, 258.00000);
CreateObject(1711, 1102.34412, 1259.08716, 9.80650,   0.00000, 0.00000, -62.00000);
CreateObject(1728, 1104.40771, 1258.22327, 9.80050,   0.00000, 0.00000, -91.00000);
CreateObject(1723, 1168.22546, 1334.74182, 9.81588,   0.00000, 0.00000, 0.00000);
CreateObject(1704, 1174.04382, 1332.53333, 9.81270,   0.00000, 0.00000, 268.00000);
CreateObject(2607, 1172.39063, 1323.17847, 10.02580,   0.00000, 0.00000, 0.00000);
CreateObject(2207, 1171.97571, 1333.14233, 9.81120,   0.00000, 0.00000, 268.00000);
CreateObject(14837, 1149.65088, 1303.79150, 9.81501,   0.00000, 0.00000, 0.00000);
CreateObject(1209, 1175.84143, 1314.06702, 9.81390,   0.00000, 0.00000, 270.00000);
CreateObject(1209, 1160.04163, 1344.79602, 9.81448,   0.00000, 0.00000, 0.00000);
CreateObject(1775, 1175.60095, 1268.98267, 10.91860,   0.00000, 0.00000, 270.00000);
CreateObject(1775, 1175.61731, 1310.85022, 10.92190,   0.00000, 0.00000, 270.00000);
CreateObject(2218, 1167.15503, 1269.77441, 10.80680,   -25.00000, 25.00000, 18.00000);
CreateObject(2219, 1166.81750, 1251.85486, 10.85220,   331.00000, 25.00000, 4.00000);
CreateObject(2427, 1176.05542, 1258.80945, 10.81620,   0.00000, 0.00000, 268.00000);
CreateObject(2427, 1176.05554, 1297.02356, 10.82090,   0.00000, 0.00000, 270.00000);
CreateObject(1515, 1166.55420, 1306.36731, 9.81590,   0.00000, 0.00000, 270.00000);
CreateObject(1515, 1166.59741, 1305.55957, 9.81600,   0.00000, 0.00000, 270.00000);
CreateObject(1515, 1166.52991, 1307.16479, 9.81630,   0.00000, 0.00000, 270.00000);
CreateObject(2295, 1158.71802, 1319.42883, 9.81387,   0.00000, 0.00000, 0.00000);
CreateObject(2785, 1160.26440, 1306.55066, 10.81600,   0.00000, 0.00000, 270.00000);
CreateObject(1978, 1163.42322, 1314.23926, 10.81160,   0.00000, 0.00000, 0.00000);
CreateObject(1978, 1163.14709, 1299.12195, 10.81160,   0.00000, 0.00000, 0.00000);
CreateObject(14582, 1106.30835, 1247.05371, 13.27510,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1171.46558, 1320.10266, 9.81280,   0.00000, 0.00000, 91.00000);
CreateObject(19376, 1162.01624, 1319.96741, 9.81280,   0.00000, 0.00000, 91.00000);
CreateObject(19376, 1157.34265, 1315.08044, 9.81257,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1157.37268, 1297.11230, 9.81385,   0.00000, 0.00000, 0.00000);
CreateObject(19386, 1157.36621, 1308.75806, 11.55760,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1157.38135, 1302.41675, 9.81352,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1162.13171, 1292.47424, 9.81550,   0.00000, 0.00000, 91.00000);
CreateObject(19376, 1171.71216, 1292.63184, 9.81490,   0.00000, 0.00000, 91.00000);
CreateObject(19376, 1162.50171, 1297.15100, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1171.02612, 1297.18188, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1162.61157, 1311.81409, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1162.62415, 1302.28223, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1171.41431, 1315.17688, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1162.55554, 1315.05933, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1171.74597, 1306.42566, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19439, 1157.36047, 1308.60193, 14.09920,   91.00000, 0.00000, 1.00000);
CreateObject(1723, 1170.23657, 1330.07227, 9.81850,   0.00000, 0.00000, 181.00000);
CreateObject(19172, 1176.12292, 1334.35657, 12.75940,   0.00000, 0.00000, 270.00000);
CreateObject(19169, 1176.11511, 1339.25940, 12.89240,   91.00000, 84.00000, 185.00000);
CreateObject(7392, 1167.39990, 1296.81299, 23.41290,   0.00000, 0.00000, 25.00000);
CreateObject(2034, 1172.52026, 1332.85632, 10.61110,   0.00000, 0.00000, 0.00000);
CreateObject(1210, 1172.53870, 1331.53040, 10.68010,   90.00000, 0.00000, 0.00000);
CreateObject(2036, 1172.10120, 1332.11487, 10.60510,   0.00000, 0.00000, 84.00000);
CreateObject(8232, 1097.87207, 1293.21387, 9.74219,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1172.17371, 1333.16162, 10.60510,   0.00000, 0.00000, 84.00000);
CreateObject(1212, 1172.62085, 1333.12683, 10.60510,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1172.63708, 1333.23169, 10.60510,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1172.37622, 1333.23438, 10.60510,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1172.36609, 1333.12634, 10.60510,   0.00000, 0.00000, 0.00000);
CreateObject(1550, 1175.86230, 1334.36536, 10.21420,   0.00000, 0.00000, 0.00000);
CreateObject(1550, 1175.43091, 1334.33618, 10.21420,   0.00000, 0.00000, 0.00000);
CreateObject(3277, 1166.18152, 1355.60522, 14.33570,   0.00000, 0.00000, 0.00000);
CreateObject(3267, 1166.28296, 1355.58923, 14.37180,   0.00000, 0.00000, 0.00000);
CreateObject(1360, 1154.65405, 1361.46497, 9.81650,   0.00000, 0.00000, 91.00000);
CreateObject(18646, 1157.58337, 1361.08179, 13.84620,   0.00000, 0.00000, 0.00000);
CreateObject(19419, 1154.35291, 1362.57373, 15.35470,   0.00000, 0.00000, 0.00000);
CreateObject(19419, 1129.94421, 1363.02075, 15.35170,   0.00000, 0.00000, 0.00000);
CreateObject(19999, 1168.73657, 1324.46887, 9.81660,   0.00000, 0.00000, -76.00000);
CreateObject(19999, 1172.18726, 1324.41992, 9.81603,   0.00000, 0.00000, 0.00000);
CreateObject(2607, 1168.40869, 1323.24219, 10.02580,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1157.40527, 1324.64368, 9.81391,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1157.49512, 1340.35962, 9.81530,   0.00000, 0.00000, 0.00000);
CreateObject(19836, 1150.05762, 1327.25830, 9.81423,   0.00000, 0.00000, 0.00000);
CreateObject(19386, 1157.45679, 1331.02637, 11.55760,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1157.51709, 1337.38672, 9.81801,   0.00000, 0.00000, 0.00000);
CreateObject(19376, 1162.58069, 1324.60437, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1162.59485, 1340.50244, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1171.16504, 1324.59631, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1170.87891, 1333.95215, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1162.55664, 1334.15369, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1171.92432, 1340.46460, 14.98210,   0.00000, 90.00000, 0.00000);
CreateObject(19376, 1162.54321, 1345.16064, 10.13810,   91.00000, 0.00000, 90.00000);
CreateObject(19376, 1171.40967, 1345.20715, 10.13810,   91.00000, 0.00000, 90.00000);
CreateObject(1212, 1165.75244, 1344.80798, 12.40540,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1165.27258, 1344.80798, 12.40540,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1165.35364, 1344.57263, 12.40540,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1165.70959, 1344.60083, 12.40540,   0.00000, 0.00000, 0.00000);
CreateObject(19439, 1157.42505, 1331.00513, 14.09920,   91.00000, 0.00000, 1.00000);
CreateObject(8841, 1118.10583, 1326.63977, 13.19450,   0.00000, 0.00000, 91.00000);
CreateObject(2745, 1118.55774, 1307.12915, 10.69350,   0.00000, 0.00000, 0.00000);
CreateObject(627, 1117.93896, 1340.35608, 12.00630,   0.00000, 0.00000, 0.00000);
CreateObject(627, 1118.21277, 1325.48682, 12.00630,   0.00000, 0.00000, 0.00000);
CreateObject(627, 1118.42493, 1310.65308, 12.00630,   0.00000, 0.00000, 0.00000);
CreateObject(627, 1118.34534, 1309.08984, 12.00630,   0.00000, 0.00000, 0.00000);
CreateObject(627, 1118.15088, 1327.05640, 12.00630,   0.00000, 0.00000, 0.00000);
CreateObject(627, 1117.65686, 1341.91382, 12.00630,   0.00000, 0.00000, 0.00000);
CreateObject(4597, 1140.55847, 1378.16711, 9.81861,   0.00000, 0.00000, 0.00000);
CreateObject(9527, 1175.69226, 1261.87952, 15.81860,   0.00000, 0.00000, 273.00000);
CreateObject(8644, 1130.39636, 1320.69299, 19.88740,   0.00000, 0.00000, 215.00000);
CreateObject(19129, 1167.32947, 1310.05273, 9.81072,   0.00000, 0.00000, 0.00000);
CreateObject(19129, 1167.33984, 1302.65344, 9.81418,   0.00000, 0.00000, 0.00000);
CreateObject(18609, 1110.26221, 1207.94922, 10.93940,   0.00000, 0.00000, 0.00000);
CreateObject(1749, 1176.05652, 1265.08752, 11.81750,   0.00000, 0.00000, 265.00000);
CreateObject(19425, 1144.30835, 1360.61584, 9.81166,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 1141.05322, 1360.61853, 9.81421,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 1137.89075, 1360.66211, 9.81304,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 1133.73535, 1361.27466, 9.81321,   0.00000, 0.00000, 0.00000);
CreateObject(19777, 1148.37341, 1351.91748, 9.81733,   0.00000, 0.00000, 0.00000);
CreateObject(300, 1128.91003, 1357.31848, 9.81655,   0.00000, 0.00000, 0.00000);
CreateObject(300, 1166.55383, 1394.28369, 8.42925,   0.00000, 0.00000, 0.00000);
CreateObject(311, 1175.30322, 1397.94592, 11.36907,   0.00000, 0.00000, 0.00000);
CreateObject(1, 1174.50146, 1400.56091, 11.36841,   0.00000, 0.00000, 0.00000);
CreateObject(3279, 1103.20313, 1357.89050, 9.80977,   0.00000, 0.00000, 0.00000);
CreateObject(3279, 1170.74402, 1228.90991, 9.80980,   0.00000, 0.00000, 91.00000);
CreateObject(1676, 1146.67444, 1205.99292, 11.35440,   0.00000, 0.00000, 0.00000);
CreateObject(1676, 1143.92261, 1205.96118, 11.35440,   0.00000, 0.00000, 0.00000);
CreateObject(1650, 1146.06787, 1206.51111, 10.12000,   0.00000, 0.00000, 25.00000);
CreateObject(1650, 1145.70508, 1206.11609, 10.12000,   0.00000, 0.00000, 84.00000);
CreateObject(19820, 1104.38269, 1256.19495, 10.31700,   40.00000, 0.00000, 0.00000);
CreateObject(3928, 1111.32593, 1269.67419, 9.81690,   0.00000, 0.00000, 0.00000);
CreateObject(3928, 1111.64355, 1287.49182, 9.81690,   0.00000, 0.00000, 0.00000);
CreateObject(19859, 1102.64270, 1219.03357, 14.30590,   0.00000, 0.00000, 0.00000);
CreateObject(3862, 1116.55554, 1205.75452, 10.94290,   0.00000, 0.00000, 178.00000);
CreateObject(1310, 1117.41663, 1206.55823, 10.70390,   84.00000, 0.00000, 0.00000);
CreateObject(1310, 1115.55591, 1206.56116, 10.70390,   84.00000, 0.00000, 0.00000);
CreateObject(1310, 1116.52051, 1206.57520, 10.70390,   84.00000, 0.00000, 0.00000);
CreateObject(3383, 1099.59753, 1230.72119, 9.81630,   0.00000, 0.00000, 272.00000);
CreateObject(19815, 1098.72021, 1337.68396, 12.02160,   0.00000, 0.00000, 91.00000);
CreateObject(2035, 1099.59607, 1231.09106, 10.88040,   0.00000, 0.00000, 91.00000);
CreateObject(2036, 1099.41162, 1230.40881, 10.88040,   0.00000, 0.00000, 91.00000);
CreateObject(2044, 1099.85767, 1231.47461, 10.88040,   0.00000, 0.00000, 84.00000);
CreateObject(2037, 1099.58301, 1231.75098, 10.88640,   0.00000, 0.00000, 0.00000);
CreateObject(2034, 1099.87683, 1230.52490, 10.88040,   0.00000, 0.00000, 84.00000);
CreateObject(2061, 1098.99927, 1229.32788, 11.15640,   0.00000, 0.00000, 251.00000);
CreateObject(1654, 1098.97107, 1232.15991, 11.06340,   0.00000, 0.00000, 0.00000);
CreateObject(1636, 1099.79578, 1230.02808, 10.87440,   0.00000, 0.00000, 0.00000);
CreateObject(1580, 1099.78235, 1232.22693, 10.87440,   0.00000, 0.00000, 0.00000);
CreateObject(1279, 1099.74377, 1229.16248, 10.86240,   0.00000, 0.00000, 0.00000);
CreateObject(2045, 1099.15881, 1231.45898, 10.87740,   0.00000, 0.00000, 0.00000);
CreateObject(1212, 1100.05627, 1230.98181, 10.88040,   0.00000, 0.00000, 91.00000);
CreateObject(1313, 1098.98010, 1230.55469, 12.41840,   0.00000, 0.00000, 84.00000);
CreateObject(1242, 1099.73071, 1229.76025, 11.78740,   0.00000, 0.00000, 84.00000);
CreateObject(1252, 1099.19397, 1229.08496, 10.06570,   -25.00000, 0.00000, 0.00000);
CreateObject(1550, 1098.98206, 1228.75989, 10.21570,   11.00000, 0.00000, -98.00000);
CreateObject(918, 1099.28430, 1227.86523, 10.17690,   0.00000, 0.00000, 0.00000);
CreateObject(918, 1099.66797, 1227.23193, 10.17690,   0.00000, 0.00000, 0.00000);
CreateObject(6965, 1134.25159, 1252.08423, 13.43860,   0.00000, 0.00000, 0.00000);
CreateObject(6865, 1118.55627, 1304.98059, 14.72310,   0.00000, 0.00000, 40.00000);
CreateObject(9833, 1071.02734, 1323.01025, 14.00040,   0.00000, 0.00000, 0.00000);
CreateObject(12950, 1112.22974, 1219.83447, 9.61970,   0.00000, 0.00000, 88.00000);
CreateObject(19913, 1097.64587, 1228.27515, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1097.50513, 1278.22302, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1097.49963, 1328.24304, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1097.48743, 1338.37073, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1177.34473, 1338.15137, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1177.27661, 1288.38782, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1177.25269, 1248.33643, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1177.25269, 1248.33643, 20.72080,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1122.60767, 1203.33020, 20.72080,   0.00000, 0.00000, 180.00000);
CreateObject(19913, 1132.49927, 1203.35425, 20.72080,   0.00000, 0.00000, 180.00000);
CreateObject(987, 1165.32275, 1223.50500, 15.18380,   0.00000, 0.00000, 0.00000);
CreateObject(987, 1156.56689, 1223.41919, 15.18380,   0.00000, 0.00000, 0.00000);
CreateObject(987, 1157.23059, 1211.39258, 15.18380,   0.00000, 0.00000, 90.00000);
CreateObject(987, 1157.28735, 1203.44299, 15.18380,   0.00000, 0.00000, 90.00000);
CreateObject(987, 1109.41406, 1363.00537, 15.18380,   0.00000, 0.00000, 179.00000);
CreateObject(987, 1121.38623, 1362.77002, 15.18380,   0.00000, 0.00000, 179.00000);
CreateObject(987, 1130.67468, 1362.41333, 15.18380,   0.00000, 0.00000, 179.00000);
CreateObject(987, 1177.39099, 1362.82227, 13.69580,   0.00000, 0.00000, 179.00000);
CreateObject(987, 1169.26501, 1362.89661, 13.69580,   0.00000, 0.00000, 179.00000);
CreateObject(3749, 1141.92651, 1361.30298, 15.66240,   0.00000, 0.00000, 0.00000);
CreateObject(3475, 1153.54663, 1362.65784, 11.81590,   0.00000, 0.00000, -91.00000);
CreateObject(3475, 1130.33447, 1362.81689, 11.81590,   0.00000, 0.00000, -91.00000);
CreateObject(19425, 1147.59924, 1360.58362, 9.81166,   0.00000, 0.00000, 0.00000);
CreateObject(18648, 1147.85547, 1362.67017, 20.46600,   0.00000, 40.00000, 84.00000);
CreateObject(18648, 1141.27234, 1360.74976, 20.46600,   0.00000, 40.00000, 84.00000);
CreateObject(18648, 1135.29602, 1362.74072, 20.46600,   0.00000, 40.00000, 84.00000);
CreateObject(19419, 1142.08813, 1362.59558, 20.46600,   0.00000, 0.00000, 0.00000);
CreateObject(1499, 1157.42664, 1330.28406, 9.81510,   0.00000, 0.00000, 91.00000);
CreateObject(1499, 1157.34607, 1308.03503, 9.81510,   0.00000, 0.00000, 91.00000);
CreateObject(1468, 670.18872, 1700.40320, 7.40625,   356.85840, 0.00000, -0.71558);
CreateObject(8240, 1752.87305, -2653.10889, 26.09930,   0.00000, 0.00000, 0.00000);
CreateObject(8674, 1544.66833, -1623.70447, 13.77310,   0.00000, 0.00000, 0.00000);
CreateObject(8674, 1547.28906, -1632.83337, 13.77310,   0.00000, 0.00000, 0.00000);
CreateObject(8674, 1552.45129, -1637.97034, 13.77310,   0.00000, 0.00000, 90.00000);
CreateObject(8674, 1544.71643, -1632.84460, 13.77310,   0.00000, 0.00000, 0.00000);
CreateObject(8674, 1547.25781, -1623.71143, 13.77310,   0.00000, 0.00000, 0.00000);
CreateObject(8674, 1539.60388, -1618.54529, 13.77310,   0.00000, 0.00000, 89.00000);
CreateObject(968, 1544.68469, -1630.79114, 13.04500,   0.00000, 0.00000, 88.00000);
CreateObject(2754, 2139.58569, -1158.03748, 23.84040,   0.00000, 0.00000, 179.00000);
CreateObject(11737, 2233.14258, -1159.81323, 24.88540,   0.00000, 0.00000, -91.00000);
CreateObject(1649, 2345.78198, -1170.92383, 29.01410,   0.00000, 0.00000, 0.00000);
CreateObject(1649, 2325.99365, -1170.90320, 29.01410,   0.00000, 0.00000, 0.00000);
CreateObject(1649, 2326.41602, -1188.63672, 29.01410,   0.00000, 0.00000, 0.00000);
CreateObject(1649, 2346.15625, -1188.71753, 29.01410,   0.00000, 0.00000, 0.00000);
CreateObject(1649, 2346.15625, -1188.71753, 33.01410,   0.00000, 0.00000, 0.00000);
CreateObject(18657, 2140.60913, -1158.53809, 25.01560,   -98.00000, 0.00000, -33.00000);
CreateObject(19425, 1544.63611, -1628.92578, 12.31550,   0.00000, 0.00000, 91.00000);
CreateObject(19425, 1544.58142, -1625.66760, 12.31550,   0.00000, 0.00000, 91.00000);
CreateObject(280, 1544.16833, -1631.86035, 13.33860,   91.00000, 0.00000, 176.00000);
CreateObject(19425, 1985.23352, -2227.46265, 12.50260,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 1988.38098, -2227.46509, 12.50260,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 1991.29419, -2227.46509, 12.50260,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 1994.42505, -2227.45776, 12.50260,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 1997.55359, -2227.44873, 12.50260,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 2000.72729, -2227.44312, 12.50260,   0.00000, 0.00000, 0.00000);
CreateObject(19425, 2003.59717, -2227.44092, 12.50260,   0.00000, 0.00000, 0.00000);
CreateObject(17720, 1839.12451, -1752.94678, 12.37437,   0.00000, 0.00000, 0.00000);
CreateObject(8131, 1651.94641, 723.69550, 20.59760,   0.00000, 0.00000, 0.00000);
CreateObject(10377, 1726.69690, 723.39008, 27.87270,   0.00000, 0.00000, 180.00000);
CreateObject(7605, 1652.46899, 723.54437, 9.89590,   0.00000, 0.00000, 0.00000);
CreateObject(14608, 1713.05371, 753.15308, 11.58190,   0.00000, 0.00000, 47.00000);
CreateObject(3806, 1651.75940, 727.15961, 10.31840,   0.00000, 0.00000, 90.00000);
CreateObject(3806, 1648.56470, 723.54126, 10.31840,   0.00000, 0.00000, 180.00000);
CreateObject(3806, 1651.78699, 720.34790, 10.31840,   0.00000, 0.00000, 270.00000);
CreateObject(3806, 1655.37024, 723.57501, 10.31840,   0.00000, 0.00000, 360.00000);
CreateObject(3660, 1691.51331, 729.46234, 11.79730,   0.00000, 0.00000, 0.00000);
CreateObject(3660, 1691.51538, 718.16882, 11.79730,   0.00000, 0.00000, 0.00000);
CreateObject(8660, 1652.61475, 726.24146, 10.80940,   0.00000, 0.00000, 91.00000);
CreateObject(8660, 1652.75500, 722.75769, 10.80940,   0.00000, 0.00000, 91.00000);
CreateObject(14608, 1713.11365, 694.25653, 11.58190,   0.00000, 0.00000, 47.00000);
CreateObject(19054, 1646.47253, 712.73889, 10.62040,   0.00000, 0.00000, 0.00000);
CreateObject(19055, 1645.43860, 711.60553, 10.62040,   0.00000, 0.00000, 47.00000);
CreateObject(19056, 1647.06677, 711.22180, 10.62040,   0.00000, 0.00000, 0.00000);
CreateObject(19057, 1646.06433, 710.05499, 10.62040,   0.00000, 0.00000, 33.00000);
CreateObject(19076, 1647.80408, 709.15491, 9.94640,   0.00000, 0.00000, 84.00000);
CreateObject(11737, 1708.22375, 723.38666, 11.62150,   0.00000, 0.00000, -91.00000);
CreateObject(11737, 1708.22009, 716.71411, 11.62150,   0.00000, 0.00000, -91.00000);
CreateObject(11737, 1708.23267, 730.62769, 11.62150,   0.00000, 0.00000, -91.00000);
CreateObject(19913, 1732.61218, 782.78302, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1682.62427, 782.79559, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1632.59778, 782.82220, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1602.46826, 782.83728, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1577.49365, 757.83508, 15.21990,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1577.46069, 748.30139, 15.21990,   0.00000, 0.00000, 90.00000);
CreateObject(19912, 1577.49573, 700.20227, 20.89440,   0.00000, -91.00000, 90.00000);
CreateObject(19912, 1577.49927, 694.67163, 20.79540,   0.00000, -91.00000, 90.00000);
CreateObject(19912, 1577.50574, 689.17511, 20.70240,   0.00000, -91.00000, 90.00000);
CreateObject(19912, 1577.47290, 683.64410, 20.60040,   0.00000, -91.00000, 90.00000);
CreateObject(19912, 1577.46790, 678.12323, 20.49540,   0.00000, -91.00000, 90.00000);
CreateObject(19912, 1577.43860, 672.71118, 20.40540,   0.00000, -91.00000, 90.00000);
CreateObject(19912, 1577.44531, 667.23761, 20.35740,   0.00000, -91.00000, 90.00000);
CreateObject(19912, 1577.42480, 665.76160, 20.32740,   0.00000, -91.00000, 90.00000);
CreateObject(19905, 1611.96863, 672.52069, 9.79710,   0.00000, 0.00000, 180.00000);
CreateObject(19913, 1602.38501, 663.04669, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1652.36682, 663.05792, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1702.30481, 663.05090, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1732.57556, 663.05823, 15.21990,   0.00000, 0.00000, 0.00000);
CreateObject(19913, 1757.56738, 688.03052, 15.21990,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1757.54248, 737.98792, 15.21990,   0.00000, 0.00000, 90.00000);
CreateObject(19913, 1757.54199, 757.76453, 15.21990,   0.00000, 0.00000, 90.00000);
CreateObject(9482, 1577.48938, 713.12128, 16.43130,   0.00000, 0.00000, 0.00000);
CreateObject(3475, 1577.54016, 704.62616, 12.17050,   0.00000, 0.00000, 0.00000);
CreateObject(3475, 1577.26868, 721.78766, 12.17050,   0.00000, 0.00000, 182.00000);
CreateObject(7388, 1581.74670, 666.64856, 9.81293,   0.00000, 0.00000, 0.00000);
    profileStuff();
    f_init();
	connection = mysql_init(LOG_ONLY_ERRORS, 1);

  	mysql_connect("127.0.0.1", "root", "test@1234@test", "phcnr", connection, 1);  //HOST,USERNAME,PASS,DB

	// Databases
	//VEHICLEDB = db_open("dbs/Vehicles.db");
	HOUSEDB = db_open("dbs/Houses.db");
	GATESDB = db_open("dbs/Gates.db");
	VEHICLESDB = db_open("dbs/newvehicles.db");

	SetGameModeText("Cops And Robbers v5.6");
	SendRconCommand("language English All");

	// Skydive Pickup
	pickup_chute = CreatePickup(371, 1, -1813.0156, 576.6133, 234.8906, 0);

	// Secret Service Pickup
	pickup_ss = CreatePickup(371, 1, -1737.6863, 787.3431, 167.6535, 0);

	// VIP Health Pickup (for all VIPs)
	pickup_vhealth = CreatePickup(1240, 1, 1222.8495, -6.2668, -1001.3281, 80);
	pickup_vhealth2 = CreatePickup(1240, 1, 942.3300, 4.0157, 1000.9297, 81);
	pickup_vhealth3 = CreatePickup(1240, 1, 1208.1934, -7.0289, 1001.3281, 80);

	// VIP Armour Pickup (for crim/top VIPs)
	pickup_varmour = CreatePickup(1242, 1, 1217.9944, -6.6420, 1001.3281, 80);
	pickup_varmour2 = CreatePickup(1242, 1, 938.5811, 4.0508, 1000.9297, 81);


	// Stop stunt rewards
	EnableStuntBonusForAll(0);

	LoadBribe();

	// Use standard CJ anims
	UsePlayerPedAnims();

	// Disable the default interior yellow markers for enter/exit
	DisableInteriorEnterExits();

	// Place robbery checkpoints all around the map
	placeAllCheckpoints();
	loadMapIcons();

	// Place the class vehicles all around the map
	placeAllClassCars();
	placeExtraCars();

	// Add the custom objects
	addWorldObjects();

	// Textdraws
	buildTextDraws();

	// Houses
	load_houses();

	// Gates
	load_gates();

	// Businesses
	//load_businesses();

	// Vehicles
	//load_oVehicles();
	Load_Vehicles();

	// Zones
	load_zones();

	// Flush gangs
	flushGangs();

	// Flush explosives
	flushExplosiveData();

	// Set server weather
	SetWeather(4);


	SetTimer("GateCheck", 800, true);

	//Create gate's
	for(new i=0, all=sizeof(gates); i<all; i++)
    {
        gates[i][ag_id] = CreateObject(980, gates[i][ag_closePos][0], gates[i][ag_closePos][1], gates[i][ag_closePos][2], gates[i][ag_closePos][3], gates[i][ag_closePos][4], gates[i][ag_closePos][5]);
    }


	// Timers
	SetTimer("countMuteTime", 1000, true);
	SetTimer("countRobTime", 1000, true);
	SetTimer("highPing", 2000, true);
	SetTimer("armourCheck", 5000, true); // also caters for DM arena checks
	SetTimer("checkJetpack", 2000, true);
	SetTimer("gameTip", 600000, true);
	SetTimer("quotes", 900000, true);
	SetTimer("vipCheck", 300000, true);
	SetTimer("Zones_Update", 1000, true);
	SetTimer("classCheck", 10000, true);
	SetTimer("autoMoneyBag", 1200000, true);
	SetTimer("swapMOTD", 300000, true);

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		Zones[i] = TextDrawCreate(86.000000, 320.000000, "_");
		TextDrawBackgroundColor(Zones[i], 255);
		TextDrawFont(Zones[i], 1);
		TextDrawLetterSize(Zones[i], 0.300000, 1.200000);
		TextDrawColor(Zones[i], -1);
		TextDrawSetOutline(Zones[i], 0);
		TextDrawSetProportional(Zones[i], 1);
		TextDrawSetShadow(Zones[i], 1);
		TextDrawUseBox(Zones[i], 0);
		TextDrawAlignment(Zones[i], 2);
	}

	alog[1] = " ";
	alog[2] = " ";
	alog[3] = " ";
	alog[4] = " ";
	alog[5] = " ";

	new
		motd1[128] = "Welcome to ~g~CZ Cops & Robbers! Have fun!",
		motd2[128] = "You can see server credits by typing /credits!",
		motd3[128] = "This Server Powered By ~r~CZCNR STAFFS",
		motd4[128] = "Visit Our Forum : ~r~Soon"
	;

	serverInfo[MOTD1] = motd1;
	serverInfo[MOTD2] = motd2;
	serverInfo[MOTD3] = motd3;

	serverInfo[enableMOTD] = true;
	SetTimer("swapMOTD", 20000, false);

	drawGamemodeInitTextdraws();

	serverInfo[maxPing] = 1024;
	serverInfo[kickWarp] = 0;
	N11 = 11 * 60;
	gtime = N11 + 59;

	serverInfo[jailblown] = 0;
	serverInfo[jailblown2] = 0;
	serverInfo[moneybagid] = 1;
	serverInfo[rfAnticheat] = 0;
	serverInfo[abAnticheat] = 0;
	serverInfo[carAnticheat] = 0;
	serverInfo[cbAnticheat] = 0; // ANTICBUG DISABLED IF THIS IS SET TO 0

	// Set up several player classes
	AddPlayerClass(230, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	0	=	Civilian
	AddPlayerClass(117, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	1	=	Civilian
	AddPlayerClass(2, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	    // Class ID 	2	=	Civilian
	AddPlayerClass(191, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	3	=	Civilian
	AddPlayerClass(289, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	4	=	Civilian
	AddPlayerClass(13, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	5	=	Civilian
	AddPlayerClass(18, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	6	=	Civilian
	AddPlayerClass(45, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	7	=	Civilian
	AddPlayerClass(66, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	8	=	Civilian
	AddPlayerClass(106, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	9	=	Civilian
	AddPlayerClass(242, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	10	=	Civilian
	AddPlayerClass(261, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	11	=	Civilian
	AddPlayerClass(271, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	12	=	Civilian
	AddPlayerClass(293, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	13	=	Civilian
	AddPlayerClass(296, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	14	=	Civilian
	AddPlayerClass(12, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	15	=   Civilian
	AddPlayerClass(13, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	16	=   Civilian
	AddPlayerClass(31, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	17	=   Civilian
	AddPlayerClass(41, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	18	=   Civilian
	AddPlayerClass(92, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	19	=   Civilian
	AddPlayerClass(105, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	20	=   Civilian
	AddPlayerClass(106, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	21	=   Civilian
	AddPlayerClass(107, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	22	=   Civilian
	AddPlayerClass(108, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	23	=   Civilian
	AddPlayerClass(109, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	24	=   Civilian
	AddPlayerClass(110, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	25	=   Civilian
	AddPlayerClass(115, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	26	=   Civilian
	AddPlayerClass(130, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	27	=   Civilian
	AddPlayerClass(139, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	28	=   Civilian
	AddPlayerClass(195, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	29	=   Civilian
	AddPlayerClass(211, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	30	=   Civilian
	AddPlayerClass(216, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	31	=   Civilian
	AddPlayerClass(215, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	32	=   Civilian
	AddPlayerClass(219, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	33	=   Civilian
	AddPlayerClass(249, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	34	=   Civilian

    AddPlayerClass(267, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID     36	=	Police
    AddPlayerClass(266, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID     37	=	Police
    AddPlayerClass(265, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID     38	=	Police
	AddPlayerClass(281, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID     39	=	Police
	AddPlayerClass(280, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	40	=	Police
	AddPlayerClass(282, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	41	=	Police
	AddPlayerClass(283, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	42	=	Police
	AddPlayerClass(284, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	43	=	Police
    AddPlayerClass(93, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);		// Class ID 	44	=	Police

	AddPlayerClass(287, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	45	=   Army
	AddPlayerClass(191, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	46	=   Army

	AddPlayerClass(163, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	47	=   CIA
	AddPlayerClass(164, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	48	=   CIA
	AddPlayerClass(165, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	49	=   CIA
	AddPlayerClass(166, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	50	=   CIA

	AddPlayerClass(285, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	51	=   FBI
	AddPlayerClass(286, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	52	=   FBI

    AddPlayerClass(274, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	53	=   Medic
    AddPlayerClass(275, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	54	=   Medic
    AddPlayerClass(276, -1505.5410, 920.3940, 7.1875, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	55	=   Medic

	AddPlayerClass(165, -1763.6486, 795.1059, 167.6563, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	56	=   Secret Service
	AddPlayerClass(169, -1763.6486, 795.1059, 167.6563, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	57	=   Secret Service
	AddPlayerClass(227, -1763.6486, 795.1059, 167.6563, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	58	=   Secret Service

	AddPlayerClass(277, -1763.6486, 795.1059, 167.6563, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	58	=   Secret Service
	AddPlayerClass(278, -1763.6486, 795.1059, 167.6563, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	58	=   Secret Service
	AddPlayerClass(279, -1763.6486, 795.1059, 167.6563, 90, 0, 0, 0, 0, 0, 0);	// Class ID 	58	=   Secret Service

	serverInfo[falloutOpen] = false;
	//gangInit();
	return 1;
}

public OnGameModeExit()
{
    //gangExit();
	mysql_close(connection);
    db_close(VEHICLESDB);
    db_close(HOUSEDB);
	return 1;
}

forward OnIncomingConnection( playerid, ip_address[ ], port );
public OnIncomingConnection( playerid, ip_address[ ], port ) {
    SendRconCommand( "reloadbans" );
}

public OnPlayerFloodControl(playerid, iCount, iTimeSpan) {
    if(iCount > 4 && iTimeSpan < 8000) {
        Ban(playerid);
    }
}

public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if (playerData[playerid][isInDM])
	{
		playerData[playerid][isInDM] = false;
		playerData[playerid][isInEvent] = false;
		playerData[playerid][isInCVR] = false;

		for (new i=0; i<MAX_PLAYERS; i++)
		{
			if(playerData[i][isInDM])
			{
				new dmLeave[100];
				format(dmLeave, sizeof(dmLeave), "{FAAC58}%s(%i) {FFFFFF}left the arena.", playerData[playerid][playerNamee], playerid);
				SendClientMessage(i, COLOR_WHITE, dmLeave);
			}
		}
	}

	playerData[playerid][selectingClass] = true;
    TextDrawHideForPlayer(playerid, Text:URLTD);
    PlayerTextDrawSetString(playerid, playerData[playerid][wantedStars], " ");

	if(playerData[playerid][playerBanned] != 1)
	{

		ClearAnimations(playerid);
  		ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 1, 1, 0, 0, 0, 0, 1);
		ApplyAnimation(playerid, "BOMBER", "BOM_PLANT_LOOP", 4.0, 1, 0, 0, 0, -1);
		ClearAnimations(playerid);

		new Float:spawnX, Float:spawnY, Float:spawnZ;
		spawnX = -1967.5838;
		spawnY = 136.1628;
		spawnZ = 27.6875;
		ClearAnimations(playerid);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, spawnX, spawnY, spawnZ);
		SetPlayerCameraPos(playerid, spawnX + 5.0, spawnY +3.0, spawnZ + 2.00);
	    SetPlayerCameraLookAt(playerid, spawnX, spawnY, spawnZ);
		SetPlayerFacingAngle(playerid, -90.0000);

		switch(classid)
		{
		    // Civilian classes
		    case 0 .. 35:
		    {
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "~w~Civilian Class");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Cruise around San Fierro with your dick out, maybe.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "Commit crimes to earn XP and rule the streets.");
    			PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], " ");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "0 XP REQUIRED");

				playerData[playerid][playerClass] = CLASS_CIVILIAN;
				SetPlayerColor(playerid, CLASS_CIVILIAN_COLOUR);

    			/*SetPlayerPos(playerid, -1940.6138,149.7429,41.0000);
				SetPlayerFacingAngle(playerid, 1.4989);
      			SetPlayerCameraPos(playerid, -1940.5756,154.3810,41.0000);
				SetPlayerCameraLookAt(playerid,  -1940.6138,149.7429,41.0000);*/
		    }

		    // Police classes
		    case 36 .. 44:
		    {
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "Police Class");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Bring criminals to justice using an array of tools.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "Hunt down and arrest criminals for cash and XP.");
    			PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], " ");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "0 XP REQUIRED");

				playerData[playerid][playerClass] = CLASS_POLICE;
				SetPlayerColor(playerid, CLASS_POLICE_COLOUR);

            	/*SetPlayerPos(playerid, -1587.0164, 721.8500, -4.9063);
				SetPlayerFacingAngle(playerid, 239.8802);
				SetPlayerCameraPos(playerid, -1581.4075, 718.5963, -5.2422);
				SetPlayerCameraLookAt(playerid, -1587.0164, 721.8500, -4.9063);*/
		    }

			// Army class
		    case 45, 46:
		    {
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "~p~Army Class");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Don't feel man enough? Join the Army!");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "Access powerful weaponry & machinery");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], "to kill those criminal bastards.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "20,000 XP REQUIRED");

				playerData[playerid][playerClass] = CLASS_ARMY;
				SetPlayerColor(playerid, CLASS_ARMY_COLOUR);

            	/*SetPlayerPos(playerid, -1403.1262, 490.1483, 18.2294);
				SetPlayerFacingAngle(playerid, 77.3216);
				SetPlayerCameraPos(playerid, -1408.0873, 491.7008, 18.2294);
				SetPlayerCameraLookAt(playerid, -1403.1262, 490.1483, 18.2294);*/
			}

			// CIA class
		    case 47 .. 50:
		    {
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "Central Intelligence Agency");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Bring criminals to justice using an array of tools.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "Gain the ability to locate and EMP criminals.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], " ");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "10,000 XP REQUIRED");

				playerData[playerid][playerClass] = CLASS_CIA;
				SetPlayerColor(playerid, CLASS_CIA_COLOUR);

          		/*SetPlayerPos(playerid, -2439.5608, 503.9104, 29.9403);
				SetPlayerFacingAngle(playerid, 108.6551);
				SetPlayerCameraPos(playerid, -2445.3594, 501.9529, 30.0897);
				SetPlayerCameraLookAt(playerid, -2439.5608, 503.9104, 29.9403);*/
			}

			// FBI class
		    case 51, 52:
		    {
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "Federal Bureau of Investigation");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Bring criminals to justice using an array of tools.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "Gain the ability to force entry to any property that");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], "isn't highly secure.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "5,000 XP REQUIRED");

				playerData[playerid][playerClass] = CLASS_FBI;
				SetPlayerColor(playerid, CLASS_FBI_COLOUR);

            	/*SetPlayerPos(playerid, -2542.9304,609.6630,14.45313);
				SetPlayerFacingAngle(playerid, 89.8099);
				SetPlayerCameraPos(playerid, -2550.9407,609.0056,14.4531);
				SetPlayerCameraLookAt(playerid, -2542.9304,609.6630,14.4531);*/
			}

			// Medic class
		    case 53 .. 55:
		    {
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "~p~Medic Class");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Heal player injuries or cure their STDs");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "for cash and XP.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], " ");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "0 XP REQUIRED");

				SetPlayerColor(playerid, CLASS_MEDIC_COLOUR);
				playerData[playerid][playerClass] = CLASS_MEDIC;

            	/*SetPlayerPos(playerid, -2644.3481, 618.6160, 14.4531);
				SetPlayerFacingAngle(playerid, 236.1596);
				SetPlayerCameraPos(playerid, -2637.7776, 614.2100, 14.453);
				SetPlayerCameraLookAt(playerid, -2644.3481, 618.6160, 14.4531);*/
			}

			// Secret Service Class
		    case 56 .. 58:
		    {
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "San Fierro Secret Service");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Bring criminals to justice using an array of tools.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "Become incognito and hide in the shadows.");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], " ");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "VIP MEMBERSHIP REQUIRED");

				SetPlayerColor(playerid, CLASS_SECRETSERVICE_COLOUR);
				playerData[playerid][playerClass] = CLASS_SECRETSERVICE;

          		/*SetPlayerPos(playerid, -1763.6486, 795.1059, 167.6563);
				SetPlayerFacingAngle(playerid, 37.2926);
				SetPlayerCameraPos(playerid, -1767.7225, 800.5792, 167.6563);
				SetPlayerCameraLookAt(playerid, -1763.6486, 795.1059, 167.6563);*/

			}

			case 59 .. 61:
			{
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][2], "San Fierro Firefighter");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][3], "Fire? Don't worry fireman is here!");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][4], "");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][7], "Drive a firetrucks to extinguish the fire");
				PlayerTextDrawSetString(playerid, playerData[playerid][classSelect][6], "5000 XP REQUIRED");

				SetPlayerColor(playerid, CLASS_FIREFIGHTER_COLOUR);
				playerData[playerid][playerClass] = CLASS_FIREFIGHTER;

          		/*SetPlayerPos(playerid, -2022.6642,68.3065,28.4706);
				SetPlayerFacingAngle(playerid, 267.0116);
				SetPlayerCameraPos(playerid, -2016.7330,67.8697,28.9392);
				SetPlayerCameraLookAt(playerid, -2022.6642,68.3065,28.4706);*/
			}
		}
 	}
 	PlayerTextDrawShow(playerid, playerData[playerid][classSelect][1]);
	PlayerTextDrawShow(playerid, playerData[playerid][classSelect][2]);
	PlayerTextDrawShow(playerid, playerData[playerid][classSelect][3]);
	PlayerTextDrawShow(playerid, playerData[playerid][classSelect][4]);
	PlayerTextDrawShow(playerid, playerData[playerid][classSelect][6]);
	PlayerTextDrawShow(playerid, playerData[playerid][classSelect][7]);
	ApplyAnimation(playerid,"PED","SEAT_down", 4.1, 0, 1, 1, 1, 1, 0);

	return 1;
}

public OnPlayerConnect(playerid)
{
RemoveBuildingForPlayer(playerid, 1266, 1538.5234, -1609.8047, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 4229, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 4230, 1597.9063, -1699.7500, 30.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1260, 1538.5234, -1609.8047, 19.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1544.6250, -1593.0313, 15.6250, 0.25);
RemoveBuildingForPlayer(playerid, 3672, 1754.1719, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1649.0625, -2641.4063, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 3629, 1754.1719, -2666.0078, 18.8828, 0.25);
RemoveBuildingForPlayer(playerid, 1290, 1855.7969, -2641.4063, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 5031, 2037.0469, -2313.5469, 18.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1986.2813, -2227.4141, 13.7578, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 1983.8047, -2224.1641, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 2002.1094, -2227.3438, 13.8281, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2018.0313, -2224.1641, 12.7500, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 1957.3906, -2176.7109, 16.3438, 0.25);
RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -2073.6406, 12.7578, 0.25);
RemoveBuildingForPlayer(playerid, 3244, 2632.3906, -2136.3281, 12.7578, 0.25);
RemoveBuildingForPlayer(playerid, 3244, 2535.0938, -2131.8750, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 3244, 2532.0313, -2074.6250, 12.9922, 0.25);
RemoveBuildingForPlayer(playerid, 3682, 2673.0859, -2114.9063, 36.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3683, 2684.7656, -2088.0469, 20.1172, 0.25);
RemoveBuildingForPlayer(playerid, 3289, 2484.4141, -2141.0078, 12.1875, 0.25);
RemoveBuildingForPlayer(playerid, 3289, 2496.0625, -2141.0078, 12.1875, 0.25);
RemoveBuildingForPlayer(playerid, 3289, 2679.2344, -2106.9766, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2503.1250, -2073.3750, 12.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2515.4219, -2073.3750, 12.4063, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2647.1016, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2658.7188, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2671.5000, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3288, 2432.7266, -2133.0234, 12.4531, 0.25);
RemoveBuildingForPlayer(playerid, 3686, 2448.1328, -2075.6328, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 3745, 2475.1016, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3745, 2482.0234, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3745, 2489.1016, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3745, 2496.0938, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3290, 2452.9609, -2129.0156, 25.2734, 0.25);
RemoveBuildingForPlayer(playerid, 3756, 2484.2344, -2118.5547, 17.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3755, 2484.2344, -2118.5547, 17.7031, 0.25);
RemoveBuildingForPlayer(playerid, 3779, 2631.9141, -2098.5781, 20.0078, 0.25);
RemoveBuildingForPlayer(playerid, 3779, 2653.9375, -2092.3359, 20.0078, 0.25);
RemoveBuildingForPlayer(playerid, 5295, 2413.0547, -2106.4219, 23.0547, 0.25);
RemoveBuildingForPlayer(playerid, 5292, 2390.1719, -2033.8203, 23.8281, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2423.5391, -2144.3984, 12.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3257, 2432.7266, -2133.0234, 12.4531, 0.25);
RemoveBuildingForPlayer(playerid, 3258, 2484.4141, -2141.0078, 12.1875, 0.25);
RemoveBuildingForPlayer(playerid, 3258, 2496.0625, -2141.0078, 12.1875, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2452.9609, -2129.0156, 25.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2423.4063, -2109.1797, 11.5156, 0.25);
RemoveBuildingForPlayer(playerid, 3567, 2446.8281, -2075.8438, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3567, 2438.3594, -2075.8438, 13.2578, 0.25);
RemoveBuildingForPlayer(playerid, 3627, 2448.1328, -2075.6328, 16.0469, 0.25);
RemoveBuildingForPlayer(playerid, 1308, 2428.3906, -2066.6328, 12.6797, 0.25);
RemoveBuildingForPlayer(playerid, 3643, 2489.1016, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3643, 2482.0234, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3643, 2475.1016, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 1307, 2462.8672, -2064.7734, 12.3203, 0.25);
RemoveBuildingForPlayer(playerid, 3643, 2496.0938, -2073.4766, 17.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2515.4219, -2073.3750, 12.4063, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2503.1250, -2073.3750, 12.4297, 0.25);
RemoveBuildingForPlayer(playerid, 1307, 2509.7891, -2059.4063, 12.5313, 0.25);
RemoveBuildingForPlayer(playerid, 5150, 2482.7031, -2010.9688, 23.6016, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2663.0547, -2121.6563, 30.6250, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2665.7734, -2122.5078, 22.2813, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2667.3594, -2120.7969, 19.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2669.3359, -2120.7969, 26.9141, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2669.3359, -2120.7969, 13.2500, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2679.4375, -2121.6563, 21.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2675.8594, -2121.6563, 25.6016, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2684.2031, -2122.5078, 22.8906, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2685.0547, -2119.7891, 14.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3675, 2685.1172, -2119.1016, 19.4297, 0.25);
RemoveBuildingForPlayer(playerid, 3637, 2631.9141, -2098.5781, 20.0078, 0.25);
RemoveBuildingForPlayer(playerid, 3637, 2653.9375, -2092.3359, 20.0078, 0.25);
RemoveBuildingForPlayer(playerid, 3673, 2673.0859, -2114.9063, 36.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3258, 2679.2344, -2106.9766, 12.5391, 0.25);
RemoveBuildingForPlayer(playerid, 3674, 2682.3203, -2114.5313, 39.0313, 0.25);
RemoveBuildingForPlayer(playerid, 3636, 2684.7656, -2088.0469, 20.1172, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2647.1016, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2658.7188, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 3256, 2671.5000, -2073.3750, 12.4453, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1972.9922, -1811.4531, 15.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1960.6094, -1802.0078, 15.5000, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1930.3750, -1753.1016, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1832.8359, -1751.5078, 15.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1952.5156, -1751.3750, 15.5547, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1820.8359, -1741.1484, 15.5781, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1940.9063, -1741.1484, 15.6016, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 1990.6094, -1752.8438, 15.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2013.2891, -1751.7656, 15.5859, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2001.0391, -1740.8125, 15.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2070.2109, -1812.8828, 15.6016, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2080.9375, -1800.9453, 15.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2082.2734, -1823.9141, 15.6016, 0.25);
RemoveBuildingForPlayer(playerid, 1226, 2085.7500, -1809.7031, 16.4063, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2069.2578, -1752.9141, 15.6953, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2081.1719, -1740.8984, 15.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2093.5313, -1744.5938, 15.6172, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2094.6797, -1762.9531, 15.7266, 0.25);
RemoveBuildingForPlayer(playerid, 1283, 2104.4766, -1751.8281, 15.5938, 0.25);
RemoveBuildingForPlayer(playerid, 8087, 1667.7422, 723.2266, 21.0938, 0.25);
RemoveBuildingForPlayer(playerid, 8113, 1665.1719, 687.0469, 14.3906, 0.25);
RemoveBuildingForPlayer(playerid, 8114, 1634.7188, 772.8438, 13.8203, 0.25);
RemoveBuildingForPlayer(playerid, 8115, 1695.4922, 673.2188, 13.8203, 0.25);
RemoveBuildingForPlayer(playerid, 8159, 1665.5625, 753.8281, 14.3906, 0.25);
RemoveBuildingForPlayer(playerid, 8229, 1142.0313, 1362.5000, 12.4844, 0.25);
RemoveBuildingForPlayer(playerid, 8232, 1097.3906, 1293.1641, 9.7422, 0.25);
RemoveBuildingForPlayer(playerid, 8233, 1097.3906, 1293.1641, 9.7422, 0.25);
RemoveBuildingForPlayer(playerid, 8254, 1665.1719, 687.0469, 14.3906, 0.25);
RemoveBuildingForPlayer(playerid, 8255, 1665.5625, 753.8281, 14.3906, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1149.2734, 1197.3984, 14.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1099.2656, 1243.3125, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1099.2656, 1283.3438, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1098.8594, 1361.2266, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1099.2656, 1323.3359, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1117.2813, 1204.7109, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1136.9766, 1204.7109, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1157.0156, 1361.2266, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1175.7656, 1243.3125, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1278, 1175.7656, 1283.3438, 23.9375, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1177.3672, 1220.5547, 11.0234, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1576.4766, 662.0156, 17.0859, 0.25);
RemoveBuildingForPlayer(playerid, 1334, 1584.9297, 663.9844, 10.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1335, 1581.0938, 664.1797, 10.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1578.4922, 667.9844, 10.2109, 0.25);
RemoveBuildingForPlayer(playerid, 676, 1579.0938, 683.5625, 10.0703, 0.25);
RemoveBuildingForPlayer(playerid, 680, 1579.0000, 687.7188, 10.1250, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1575.8047, 695.9063, 14.2734, 0.25);
RemoveBuildingForPlayer(playerid, 659, 1579.9297, 695.0781, 8.7656, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 1577.8359, 708.0156, 10.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 1577.8359, 718.5234, 10.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 1579.8359, 718.5234, 10.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1215, 1579.8359, 708.0156, 10.1563, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1589.9141, 671.9453, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1589.9141, 669.1172, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1589.9141, 674.8438, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1589.9141, 677.6641, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1421, 1620.6328, 703.9688, 10.5000, 0.25);
RemoveBuildingForPlayer(playerid, 1367, 1557.6953, 768.6328, 10.4141, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1577.1953, 725.0156, 17.2188, 0.25);
RemoveBuildingForPlayer(playerid, 1346, 1574.7266, 736.9844, 11.1484, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1575.7734, 770.8203, 14.2734, 0.25);
RemoveBuildingForPlayer(playerid, 676, 1579.0938, 733.5625, 10.0703, 0.25);
RemoveBuildingForPlayer(playerid, 673, 1579.7422, 729.0078, 8.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1580.0391, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1585.3203, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1590.5938, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1595.8672, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1577.8594, 786.1953, 17.2422, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1601.1484, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1606.4219, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1611.7031, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1412, 1616.9766, 783.2500, 11.0938, 0.25);
RemoveBuildingForPlayer(playerid, 1334, 1632.0156, 663.9844, 10.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1334, 1634.6797, 663.9844, 10.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1648.5469, 674.8438, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1648.5469, 671.9453, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1648.5469, 669.1172, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1648.5469, 677.6641, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1358, 1679.6953, 767.4297, 11.0078, 0.25);
RemoveBuildingForPlayer(playerid, 8078, 1634.7188, 772.8438, 13.8203, 0.25);
RemoveBuildingForPlayer(playerid, 1335, 1651.0547, 774.8047, 10.9453, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1683.7969, 662.2578, 16.6484, 0.25);
RemoveBuildingForPlayer(playerid, 8077, 1695.4922, 673.2188, 13.8203, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1683.7969, 784.2031, 16.6484, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 744.4297, 10.9141, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 745.6172, 10.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 744.3750, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.1875, 745.4922, 11.3594, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 742.7188, 10.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 741.5469, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 747.0781, 10.9141, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 747.2734, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 748.4375, 10.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1219, 1709.0547, 750.0938, 10.0625, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1679.3828, 804.3359, 18.4766, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1689.2344, 804.3359, 19.7031, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1706.6719, 804.3359, 20.9922, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1698.3984, 804.3359, 19.7031, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1713.6719, 804.3359, 19.7031, 0.25);
RemoveBuildingForPlayer(playerid, 615, 1738.9297, 616.7578, 9.7578, 0.25);
RemoveBuildingForPlayer(playerid, 615, 1741.1641, 632.6641, 9.6406, 0.25);
RemoveBuildingForPlayer(playerid, 1503, 1749.7109, 776.4375, 10.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1754.5938, 677.6250, 10.2109, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1755.9688, 660.7578, 17.1719, 0.25);
RemoveBuildingForPlayer(playerid, 674, 1756.0234, 723.0078, 9.7656, 0.25);
RemoveBuildingForPlayer(playerid, 674, 1756.0234, 719.5781, 9.7656, 0.25);
RemoveBuildingForPlayer(playerid, 1358, 1756.0313, 771.6406, 10.9844, 0.25);
RemoveBuildingForPlayer(playerid, 654, 1728.7578, 791.2969, 9.8438, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1732.2500, 804.3359, 20.9922, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1726.1797, 804.3359, 20.9922, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1719.4219, 804.3359, 20.6484, 0.25);
RemoveBuildingForPlayer(playerid, 654, 1742.8516, 799.3594, 9.8438, 0.25);
RemoveBuildingForPlayer(playerid, 763, 1745.2813, 812.1719, 9.5625, 0.25);
RemoveBuildingForPlayer(playerid, 1335, 1756.5313, 684.9688, 10.9453, 0.25);
RemoveBuildingForPlayer(playerid, 1440, 1756.4219, 678.9609, 10.2109, 0.25);
RemoveBuildingForPlayer(playerid, 1334, 1756.5781, 691.1641, 10.9297, 0.25);
RemoveBuildingForPlayer(playerid, 1334, 1756.5781, 688.6250, 10.9297, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1758.2344, 725.6641, 17.1641, 0.25);
RemoveBuildingForPlayer(playerid, 763, 1766.6250, 737.6250, 9.5625, 0.25);
RemoveBuildingForPlayer(playerid, 654, 1767.0391, 759.5938, 8.8984, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1757.9766, 783.3750, 17.2188, 0.25);
RemoveBuildingForPlayer(playerid, 654, 1758.0313, 799.3594, 8.8984, 0.25);
RemoveBuildingForPlayer(playerid, 736, 1769.7422, 790.6484, 20.9922, 0.25);
RemoveBuildingForPlayer(playerid, 8513, 1927.3906, 703.2266, 14.0781, 0.25);
RemoveBuildingForPlayer(playerid, 8820, 1927.3906, 703.2266, 14.0781, 0.25);
RemoveBuildingForPlayer(playerid, 3536, 1842.3828, 690.2813, 12.1094, 0.25);
RemoveBuildingForPlayer(playerid, 3537, 1842.3828, 663.7734, 12.3438, 0.25);
RemoveBuildingForPlayer(playerid, 3539, 1842.4141, 716.9453, 12.3438, 0.25);
RemoveBuildingForPlayer(playerid, 3537, 1842.3828, 743.8359, 12.3438, 0.25);
RemoveBuildingForPlayer(playerid, 8969, 2071.6250, 702.8906, 22.0078, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1875.1641, 623.9453, 17.2969, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1881.9844, 637.4922, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1871.6875, 645.9453, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1960.7656, 643.8906, 9.7422, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1975.4453, 644.5469, 9.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1966.7656, 637.4922, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 3444, 1842.3828, 663.7734, 12.3438, 0.25);
RemoveBuildingForPlayer(playerid, 634, 1856.1563, 662.0781, 9.8438, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1959.9922, 647.8672, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1959.9922, 658.3516, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 8887, 1967.5547, 653.0781, 10.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1974.8672, 647.8672, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1974.8672, 658.3516, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1967.7344, 653.0703, 19.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1983.1172, 653.5547, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1827.6172, 676.5938, 11.2813, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1827.6172, 675.8750, 11.2813, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1827.6172, 678.1719, 11.2813, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1863.1484, 681.9609, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 641, 1856.6484, 682.5156, 7.6094, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 1878.6484, 683.7734, 10.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 1881.3828, 683.7734, 10.6250, 0.25);
RemoveBuildingForPlayer(playerid, 3464, 1842.3828, 690.2813, 12.1094, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1857.5938, 712.3516, 17.2813, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1852.0156, 690.8359, 11.5781, 0.25);
RemoveBuildingForPlayer(playerid, 625, 1879.0547, 698.9141, 10.7109, 0.25);
RemoveBuildingForPlayer(playerid, 625, 1879.0547, 710.3359, 10.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1917.7109, 683.2656, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 1343, 1885.4844, 683.7500, 10.5625, 0.25);
RemoveBuildingForPlayer(playerid, 628, 1905.0859, 703.2969, 11.8125, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1937.2969, 683.2656, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 1350, 1981.8594, 683.3359, 9.7969, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 1969.9453, 693.7422, 10.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1343, 1976.6797, 693.7109, 10.5625, 0.25);
RemoveBuildingForPlayer(playerid, 625, 1978.2031, 698.9141, 10.7109, 0.25);
RemoveBuildingForPlayer(playerid, 1343, 1969.2109, 712.7344, 10.5625, 0.25);
RemoveBuildingForPlayer(playerid, 644, 1945.9766, 703.2031, 10.1250, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 1975.6953, 712.7031, 10.6250, 0.25);
RemoveBuildingForPlayer(playerid, 625, 1978.2031, 710.0156, 10.7109, 0.25);
RemoveBuildingForPlayer(playerid, 647, 1852.0156, 715.2344, 11.5469, 0.25);
RemoveBuildingForPlayer(playerid, 3466, 1842.4141, 716.9453, 12.3438, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1871.6875, 717.3828, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 632, 1896.0703, 717.8984, 10.2734, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 1884.8359, 722.7031, 10.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1344, 1882.1016, 722.7031, 10.6250, 0.25);
RemoveBuildingForPlayer(playerid, 1343, 1877.8828, 722.7344, 10.5625, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1937.3594, 723.0859, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 1231, 1917.4219, 723.0859, 12.4609, 0.25);
RemoveBuildingForPlayer(playerid, 3444, 1842.3828, 743.8359, 12.3438, 0.25);
RemoveBuildingForPlayer(playerid, 641, 1856.6484, 745.2031, 7.6406, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1959.9922, 747.9375, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 8888, 1967.5547, 753.2656, 10.4688, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1974.8672, 747.9375, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 712, 1967.7344, 753.0078, 19.3438, 0.25);
RemoveBuildingForPlayer(playerid, 634, 1858.6563, 762.7422, 9.7734, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1863.1484, 760.9141, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 3459, 1875.1641, 782.6406, 17.2969, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1887.7031, 777.5000, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1257, 1885.1875, 767.1641, 11.0781, 0.25);
RemoveBuildingForPlayer(playerid, 1294, 1927.1250, 768.9766, 14.2500, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1959.9922, 758.4219, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1960.7656, 761.8281, 9.7422, 0.25);
RemoveBuildingForPlayer(playerid, 1280, 1974.8672, 758.4219, 10.2266, 0.25);
RemoveBuildingForPlayer(playerid, 620, 1976.8125, 760.9453, 9.7422, 0.25);
RemoveBuildingForPlayer(playerid, 780, 1395.9297, 444.8438, 18.9297, 0.25);
RemoveBuildingForPlayer(playerid, 4514, 440.0469, 587.4453, 19.7344, 0.25);
RemoveBuildingForPlayer(playerid, 4515, 604.5234, 352.5391, 19.7344, 0.25);
RemoveBuildingForPlayer(playerid, 4518, 1694.3203, 395.1094, 31.1641, 0.25);

	if(IsPlayerNPC(playerid)) return 1;
	for(new x = 0; x < MAX_OSLOTS; x++)
	{
		playerData[playerid][toyStatus][x] = false;
		if(IsPlayerAttachedObjectSlotUsed(playerid, x))
		{
			RemovePlayerAttachedObject(playerid, x);
		}
	}
	new namez[MAX_PLAYER_NAME];
	GetPlayerName(playerid, namez, MAX_PLAYER_NAME);
	if(FindIP(namez))
	{
	    Kick(playerid);
	    return 1;
	}
	for(new xxx = 0; xxx < 100; xxx++)
		SendClientMessage(playerid, -1, " ");

	for(new x = 0; x < MAX_ZONES; x++)
	{
		if(zoneData[x][zoneGang] == -1)
		{
			GangZoneShowForPlayer(playerid, zoneData[x][zoneGangZone], 0x000000AA);
			if(zoneData[x][zoneAttacker] != -1)
			{
				new gcolour[10];
				format(gcolour, 10, "%s50", gangData[zoneData[x][zoneAttacker]][gangColor]);
				GangZoneFlashForPlayer(playerid, zoneData[x][zoneGangZone], HexToInt(gcolour));
			}
		}
		else
		{
			new gang = zoneData[x][zoneGang], gcolour[10];
			format(gcolour, 10, "%s50", gangData[gang][gangColor]);
			GangZoneShowForPlayer(playerid, zoneData[x][zoneGangZone], HexToInt(gcolour));
			if(zoneData[x][zoneAttacker] != -1)
			{
				format(gcolour, 10, "%s50", gangData[zoneData[x][zoneAttacker]][gangColor]);
				GangZoneFlashForPlayer(playerid, zoneData[x][zoneGangZone], HexToInt(gcolour));
			}
		}
	}

	SendClientMessage(playerid, -1, "Welcome to {0000FF}CSFCNR, Invite Your Freinds. {FFFF00}.");

    ac_OnPlayerConnect(playerid);

	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"RAPPING");
    PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"BEACH");
    PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"FOOD");
    PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"DEALER");
    PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
    PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
    PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"PED");
    PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"OTB");
    PreloadAnimLib(playerid,"BD_Fire");
	PreloadAnimLib(playerid,"BENCHPRESS");
    PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"BSKTBALL");
    PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"SWORD");
    PreloadAnimLib(playerid,"POLICE");
	PreloadAnimLib(playerid,"SUNBATHE");
    PreloadAnimLib(playerid,"FAT");
	PreloadAnimLib(playerid,"WUZI");
    PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"ROB_BANK");
    PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"RIOT");
    PreloadAnimLib(playerid,"GYMNASIUM");
	PreloadAnimLib(playerid,"CAR");
    PreloadAnimLib(playerid,"CAR_CHAT");
	PreloadAnimLib(playerid,"GRAVEYARD");
    PreloadAnimLib(playerid,"POOL");

	for(new i= 0; i < 47; i++)
	{
		PlayerWeapons[playerid][i] = false;
	}

    SetPlayerColor(playerid, 0xFFFFFFFF);
 	ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 1, 1, 0, 0, 0, 0, 1);
	ClearAnimations(playerid);
	TogglePlayerSpectating(playerid, true);
	ResetPlayerWeapons(playerid);

	// Setup local variables
    new query[200], ban_query[200], playerName[24], playersName[24], playersIP[16];
    GetPlayerName(playerid, playerName, 24);

	format(query, sizeof(query), "SELECT `playerName` FROM `playerdata` WHERE playerName = '%s' LIMIT 1", playerName);
    mysql_query(query, MYSQL_RESULT_CHECK, playerid, connection);

	GetPlayerName(playerid, playersName, sizeof(playersName));
	GetPlayerIp(playerid, playersIP, sizeof(playersIP));

	// Ban-checking system
	format(ban_query, sizeof(ban_query), "SELECT * FROM `playerbans` WHERE `player_banned` = '%s' OR `player_ip` = '%s' LIMIT 1", playersName, playersIP);
    mysql_query(ban_query, MYSQL_QUERY_BANNED, playerid, connection);

	clearWorldObjects(playerid);
	// loadMapIcons(playerid);

	playerData[playerid][CheckSpeed] = SetTimerEx("speedCheck", 2000, true, "i", playerid);

	//remove new viphouse replace new ammu
	/*RemoveBuildingForPlayer(playerid, 1232, -1980.9063, 866.9375, 46.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1375, -1996.1641, 888.4141, 46.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1980.9063, 901.7031, 46.7813, 0.25);*/

	//removeold bank
	/*RemoveBuildingForPlayer(playerid, 9901, -1459.1016, 920.0938, 31.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 9963, -1459.1016, 920.0938, 31.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 10012, -1767.9531, 1052.8984, 48.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1510.6641, 918.0234, 8.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 3875, -1520.3672, 942.1719, 13.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1516.1719, 960.5156, 8.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1375, -1529.2266, 967.6484, 7.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, -1540.9063, 1000.9219, 8.8047, 0.25);



	//remove for old bus location
	RemoveBuildingForPlayer(playerid, 673, -1776.7188, 867.6563, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 717, -1785.3906, 867.6953, 24.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 673, -1776.7188, 879.6875, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 717, -1785.3906, 884.4297, 24.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 673, -1776.7188, 891.2500, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 673, -1776.7188, 901.4453, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 717, -1785.3906, 899.5078, 24.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 673, -1730.2422, 867.6563, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 673, -1730.2422, 879.6875, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 673, -1730.2422, 891.2500, 23.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 673, -1730.2422, 901.4453, 23.4063, 0.25);*/
	
	
    playerData[playerid][isInDuel] = false;

	// Easter
	//TextDrawHideForPlayer(playerid, easterSunday);

	// Rapid fire
	playerData[playerid][shotTime] = 0;
 	playerData[playerid][shot] = 0;
 	playerData[playerid][shotWarnings] = 0;

	// Car warp
	playerData[playerid][ctpImmune] = true;
	playerData[playerid][abImmune] = true;

	Rappel[playerid] = 0;
    IsRappelling[playerid] = 0;

	playerData[playerid][isInlms] = false;
	playerData[playerid][isInCVR] = false;
	playerData[playerid][isInEvent] = false;
	playerData[playerid][isinFREEFORALL] = false;

	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new namez[MAX_PLAYER_NAME];
	if(IsValidLineSegment(Rope[playerid])) DestroyLineSegment(Rope[playerid]);
    Rappel[playerid] = 0;
    IsRappelling[playerid] = 0;
    KillTimer(LandingChecker[playerid]);
	KillTimer(playerData[playerid][skydiveTimer]);
    GetPlayerName(playerid, namez, MAX_PLAYER_NAME);
	if(FindIP(namez))
	{
	    return 1;
	}
    SetPlayerColor(playerid, 0xFFFFFFFF);
	if(playerData[playerid][playerLoggedIn])
    {
        savePlayerStats(playerid);
        //gangDisconnect(playerid);
    }

	if(reason == 1) // Manual game-quit.
	{
		new administratorAlert[128];

		if(playerData[playerid][playerIsTazed])
		{
			format(administratorAlert, sizeof(administratorAlert), "{C73E3E}[AVOID-DETECTION] {FFFFFF}%s(%i) quit the game while tazed.", playerData[playerid][playerNamee], playerid);
			adminchat(COLOR_WHITE, administratorAlert);
		}
		else if(playerData[playerid][playerIsCuffed])
		{
			format(administratorAlert, sizeof(administratorAlert), "{C73E3E}[AVOID-DETECTION] {FFFFFF}%s(%i) quit the game while cuffed.", playerData[playerid][playerNamee], playerid);
			adminchat(COLOR_WHITE, administratorAlert);
		}
		else if(playerData[playerid][playerIsTied])
		{
			format(administratorAlert, sizeof(administratorAlert), "{C73E3E}[AVOID-DETECTION] {FFFFFF}%s(%i) quit the game while tied.", playerData[playerid][playerNamee], playerid);
			adminchat(COLOR_WHITE, administratorAlert);
		}
	}
	
	if(playerData[playerid][playerGang] != INVALID_GANG_ID)
	{
		gangData[playerData[playerid][playerGang]][gangMembers][playerid] = 0;
	}

	ClearStats(playerid);
	removePlayerRoadblocks(playerid);
	destroyPlayersExplosives(playerid);
	//playerData[playerid][isInEvent] = false;
	playerData[playerid][isInFallout] = false;
	playerData[playerid][isInEvent] = false;
	//playerData[playerid][onDerby] = false;
	playerData[playerid][isInlms] = false;
	playerData[playerid][isInCVR] = false;
	playerData[playerid][isinFREEFORALL] = false;
	//playerData[playerid][onRace1] = false;
	playerData[playerid][playerAdminDuty] = false;

	// Delete labels
	Delete3DTextLabel(playerData[playerid][playerAdminLabel]);
	Delete3DTextLabel(playerData[playerid][kidnappedLabel]);

	// Destroy timers
	KillTimer(playerData[playerid][unfreezeTimer]);
	KillTimer(playerData[playerid][arrestTimer]);
	KillTimer(playerData[playerid][untieTimer]);
	KillTimer(playerData[playerid][uncuffTimer]);
	KillTimer(playerData[playerid][recuffTimer]);
	KillTimer(playerData[playerid][retazeTimer]);
	KillTimer(playerData[playerid][fixTimer]);
	KillTimer(playerData[playerid][nosTimer]);
	KillTimer(playerData[playerid][mechREMPTimer]);
	KillTimer(playerData[playerid][reactivateRapeStatus]);
	KillTimer(playerData[playerid][reactivateRobStatus]);
	KillTimer(playerData[playerid][hcpTimer]);
	KillTimer(playerData[playerid][courierTimer]);
	KillTimer(playerData[playerid][playerCanKidnap]);
	KillTimer(playerData[playerid][rapedTimer]);
	KillTimer(playerData[playerid][jailTimer]);
	KillTimer(playerData[playerid][spawnPlayerTimer]);
	KillTimer(playerData[playerid][truckExitTimer]);
	KillTimer(playerData[playerid][breakCuffsTimer]);
	KillTimer(playerData[playerid][achieveTimer]);
	KillTimer(playerData[playerid][spamTimer]);
	KillTimer(playerData[playerid][CheckSpeed]);
	KillTimer(playerData[playerid][retruckTimer]);
	KillTimer(playerData[playerid][saveStatsTimer]);
	KillTimer(playerData[playerid][rehealTimer]);
	KillTimer(playerData[playerid][recureTimer]);
	KillTimer(playerData[playerid][breakinTimer]);
	KillTimer(playerData[playerid][houseTimer]);
	KillTimer(playerData[playerid][mustLoginTimer]);

	playerData[playerid][shotTime] = 0;
 	playerData[playerid][shot] = 0;
 	playerData[playerid][shotWarnings] = 0;

	// Reset weapons for next player
	ResetPlayerWeapons(playerid);
	SendDeathMessage(INVALID_PLAYER_ID, playerid, 201);
	
	new pname[MAX_PLAYER_NAME], string[200 + MAX_PLAYER_NAME];
    GetPlayerName(playerid, pname, sizeof(pname));
    switch(reason)
    {
        case 0: format(string, sizeof(string), "{6b8485}%s(%d) Has Left The Server. (Timeout/Crashed)", pname, playerid);
        case 1: format(string, sizeof(string), "{6b8485}%s(%d) Has Left The Server. (Quit)", pname, playerid);
        case 2: format(string, sizeof(string), "{6b8485}%s(%d) Has Left The Server. (Kicked/Banned)", pname, playerid);
    }
    SendClientMessageToAll(0xAAAAAAAA, string);
    // Vehicles
 	/*for(new v = 0; v < MAX_SCRIPT_VEHICLES; v++)
	{
		if (oVehicle[v][vehicle_id] != -1)
		{
			if(!strcmp(oVehicle[v][vehicle_owner], playerData[playerid][playerNamee], true))
			{
				DestroyVehicle(oVehicle[v][vehicle_sid]);
			}
		}
	}*/

	for(new i; i < MAX_SAVED_VEHICLES; i++)
	{
	    if(VehicleInfo[i][vOwner] != playerData[playerid][actualID]) continue;
	    DestroyVehicle(VehicleInfo[i][vehicleID]);
	    VehicleInfo[i][vehicleID] = INVALID_VEHICLE_ID;
	}
	//printf("%d", _:Moneybag1);
	return 1;
}

public OnPlayerAirbreak(playerid)
{
	ac_AirBrake(playerid);
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if (!vWarped[vehicleid][Spawned])
	{
		new Float: oldPos[4];

		GetVehiclePos(vehicleid, oldPos[0], oldPos[1], oldPos[2]);
		GetVehicleZAngle(vehicleid, oldPos[3]);

	    vWarped[vehicleid][theVehicle] = vehicleid;
		vWarped[vehicleid][vehiclePositionX] = oldPos[0];
		vWarped[vehicleid][vehiclePositionY] = oldPos[1];
		vWarped[vehicleid][vehiclePositionZ] = oldPos[2];
		vWarped[vehicleid][vehiclePositionA] = oldPos[3];

	 	vWarped[vehicleid][Spawned] = true;
 	}

	vWarped[vehicleid][Spawning] = false; //try
	vWarped[vehicleid][wasOccupied] = false;
	/*if(IsValidDynamicObject(VehicleInfo[vehicleID][neon][1]))
	{
		DestroyDynamicObject(VehicleInfo[vehicleID][neon][1]);
		DestroyDynamicObject(VehicleInfo[vehicleID][neon][2]);
	}*/
	for(new i; i < MAX_SAVED_VEHICLES; i++)
	{
		if (vehicleid != VehicleInfo[i][vehicleID]) continue;

		ModVehicle(VehicleInfo[i][vehicleID]);
		ChangeVehiclePaintjob(VehicleInfo[i][vehicleID], VehicleInfo[i][vPaintjob]);

		print("Modded");

		break;
	}

    return 1;
}

public OnPlayerWeaponShot( playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ )
{
    if( hittype == BULLET_HIT_TYPE_PLAYER ) // Bullet Crashing uses just this hittype
	{
        if( !( -20.0 <= fX <= 20.0 ) || !( -20.0 <= fY <= 20.0 ) || !( -20.0 <= fZ <= 20.0 ) ) // a valid offset, it's impossible that a offset bigger than 20 is legit (less than 0 is impossible, but still, let's check for it, just for the future)
		{
		    new administratorAlert[256];
			format(administratorAlert, sizeof(administratorAlert), "{C73E3E}[BULLET-CRASHER] {FFFFFF}%s(%i) trying to use bullet crasher.", playerData[playerid][playerNamee], playerid);
			adminchat(COLOR_WHITE, administratorAlert);
			return 0; // let's desynchronize that bullet, so players won't crash
		}
	}
    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	if(!playerData[playerid][playerLoggedIn])
	{
        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You must login before spawning!");
		return 0;
	}

	switch(playerData[playerid][playerClass])
	{
  		case CLASS_POLICE:
    	{
      		if (playerData[playerid][playerXP] < 0)
      		{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You must have 100 XP to join this class.");
			    return 0;
      		}
			if (playerData[playerid][playerWantedLevel] >= 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You cannot spawn as a LEO with a civilian wanted level!");
			    return 0;
			}
			if (playerData[playerid][playerCopBanned] == 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You are cop banned!");
			    return 0;
			}
		}

  		case CLASS_ARMY:
    	{
    	    if (playerData[playerid][playerXP] < 20000)
    	    {
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You must have 20,000 XP to join this class.");
			    return 0;
			}
			if (playerData[playerid][playerWantedLevel] >= 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You cannot spawn as a LEO with a civilian wanted level!");
			    return 0;
			}
			if (playerData[playerid][playerArmyBanned] == 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You are army banned!");
			    return 0;
			}
		}

  		case CLASS_CIA:
    	{
    	    if (playerData[playerid][playerXP] < 10000)
    	    {
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You must have 10,000 XP to join this class.");
			    return 0;
			}
			if (playerData[playerid][playerWantedLevel] >= 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You cannot spawn as a LEO with a civilian wanted level!");
			    return 0;
			}
			if (playerData[playerid][playerCopBanned] == 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You are cop banned!");
			    return 0;
			}
		}

  		case CLASS_FBI:
    	{
    	    if (playerData[playerid][playerXP] < 5000)
    	    {
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You must have 5,000 XP to join this class.");
			    return 0;
			}
			if (playerData[playerid][playerWantedLevel] >= 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You cannot spawn as a LEO with a civilian wanted level!");
			    return 0;
			}
			if (playerData[playerid][playerCopBanned] == 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You are cop banned!");
			    return 0;
			}
		}

  		case CLASS_SECRETSERVICE:
    	{
    	    if (playerData[playerid][playerVIPLevel] < 1)
    	    {
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You must be a VIP to join this class.");
			    return 0;
			}
			if (playerData[playerid][playerWantedLevel] >= 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You cannot spawn as a LEO with a civilian wanted level!");
			    return 0;
			}
			if (playerData[playerid][playerCopBanned] == 1)
			{
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You are cop banned!");
			    return 0;
			}
		}

		case CLASS_FIREFIGHTER:
		{
		    if (playerData[playerid][playerXP] < 5000)//only fireman can use fire vehicle
    	    {
		        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You must have 5,000 XP to join this class.");
			    return 0;
			}
		}
	}

	return 1;
}

public OnPlayerSpawn(playerid)
{
	/*if(IsPlayerNPC(playerid))
	{
		new playername[64];
		GetPlayerName(playerid,playername,64);

	 	if(!strcmp(playername,"Bus1",true)) {
	        ac_PutPlayerInVehicle(playerid, Bus1, 0);
	        SetSpawnInfo( playerid, 0, 255, 1958.33, 1343.12, 15.36, 269.15, 0, 0, 0, 0, 0, 0 );
	        SetPlayerColor(playerid,0xFFFF00AA);
	        CreateDynamic3DTextLabel("[RB Bus Driver]", 0xFFFF00AA, 0.0, 0.0, 0.0, 35.0, playerid, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		else if(!strcmp(playername,"Bus2",true)) {
		    SetSpawnInfo( playerid, 0, 255, 1958.33, 1343.12, 15.36, 269.15, 0, 0, 0, 0, 0, 0 );
			ac_PutPlayerInVehicle(playerid, Bus2, 0);
			SetPlayerColor(playerid,0xFFFF00AA);
			CreateDynamic3DTextLabel("[RB Bus Driver]", 0xFFFF00AA, 0.0, 0.0, 0.0, 35.0, playerid, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		else if(!strcmp(playername,"PoliceHeli",true)) {
	        SetSpawnInfo( playerid, 0, 285, 1958.33, 1343.12, 15.36, 269.15, 0, 0, 0, 0, 0, 0 );
		    ac_PutPlayerInVehicle(playerid, PoliceHeli, 0);
		    SetPlayerColor(playerid,0x0000BBAA);
		    CreateDynamic3DTextLabel("[RB Helicopter]", 0x0000BBAA, 0.0, 0.0, 0.0, 35.0, playerid, INVALID_VEHICLE_ID, 0, 0, 0);
		}
		else if(!strcmp(playername,"Bulldozer",true)) {
		    SetSpawnInfo( playerid, 0, 260, 1958.33, 1343.12, 15.36, 269.15, 31, 1000, 0, 0, 0, 0 );
			ac_PutPlayerInVehicle(playerid, Bulldozer, 0);
			SetPlayerColor(playerid,0x33AA33AA);
			CreateDynamic3DTextLabel("[RB Bulldozer]", 0x0000BBAA, 0.0, 0.0, 0.0, 35.0, playerid, INVALID_VEHICLE_ID, 0, 0, 0);
		}
	    return 1;
	}*/
	KillTimer(playerData[playerid][skydiveTimer]);
	Delete3DTextLabel(playerData[playerid][kidnappedLabel]);
	/*if(playerData[playerid][playerTown] == NO_TOWN)
	{
		ShowPlayerDialog(playerid, DIALOG_TOWN, DIALOG_STYLE_LIST, "Choose Spawn Town", "San Fierro \nLas Venturas", "Choose", "");
		TogglePlayerSpectating(playerid, true);
		return 1;
	}*/

	//playerData[playerid][playerTown] = SF;
	/*for(new x = 0; x < MAX_OSLOTS; x++)
	{
		if(playerData[playerid][toyStatus][x])
		{
			if(!IsPlayerAttachedObjectSlotUsed(playerid, x))
			{
				SetPlayerAttachedObject(playerid, x, playerData[playerid][toyID][x], playerData[playerid][toyBone][x], playerData[playerid][toyPosX][x], playerData[playerid][toyPosY][x], playerData[playerid][toyPosZ][x], playerData[playerid][toyRotX][x], playerData[playerid][toyRotY][x], playerData[playerid][toyRotZ][x], playerData[playerid][toyScaleX][x], playerData[playerid][toyScaleY][x], playerData[playerid][toyScaleZ][x]);
			}
		}
	}*/

	TextDrawHideForPlayer(playerid, vSpawns[0]);
	TextDrawHideForPlayer(playerid, vSpawns[1]);


	/*new MoneybagID = serverInfo[moneybagid];
	if (MoneybagID)
	{
	 new bagIn[200];
	 //Texdraw
	 format(bagIn, sizeof(bagIn), "MoneyBag Info: %s", moneyBagInfo[MoneybagID][bagTitle]);
	 TextDrawSetString(Moneybag1, bagIn);
	 TextDrawShowForPlayer(playerid, Moneybag);
	 TextDrawShowForPlayer(playerid, Moneybag1);
	}*/


	// Car teleport
	playerData[playerid][ctpImmune] = true;
	playerData[playerid][abImmune] = true;

	// Mask
	playerData[playerid][mask] = false;

    if (serverInfo[falloutOpen])
    {
    TextDrawShowForAll(event);
	TextDrawShowForAll(eventfallout);
	}
	else if (serverInfo[GlassEvent])
	{
	TextDrawHideForAll(event1);
	TextDrawHideForAll(eventglass);
	}
	else if (serverInfo[DMEvent])
	{
	TextDrawShowForAll(event2);
	TextDrawShowForAll(eventdm);
	}
	
	if(playerData[playerid][playerLevel] >= 7)
	{
	    playerData[playerid][allowSpec] = true;
	}

	// Apply custom skin
    if (playerData[playerid][playerCustomSkin] != -1)
    {
        SetPlayerSkin(playerid, playerData[playerid][playerCustomSkin]);
	}

	if (playerData[playerid][hasBackpack])
	{
	    SetPlayerAttachedObject( playerid, 9, 371, 1, 0.048503, -0.112052, -0.021527, 356.659484, 85.123565, 0.000000, 0.919283, 1.000000, 1.000000 ); // gun_para - aest 44
	}

	if (playerData[playerid][hasParrot])
	{
	    SetPlayerAttachedObject( playerid, 8, 19078, 3, -0.025633, 0.071474, -0.042353, 152.483703, 170.041259, 353.874603, 1.000000, 1.000000, 1.000000 ); // TheParrot1 - aest 5
	}

	TextDrawHideForPlayer(playerid, bankTD);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][0]);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][1]);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][2]);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][3]);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][4]);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][5]);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][6]);
	PlayerTextDrawHide(playerid, playerData[playerid][classSelect][7]);

	TextDrawHideForPlayer(playerid, dmBox[0]);
	TextDrawHideForPlayer(playerid, dmBox[1]);
	TextDrawHideForPlayer(playerid, dmBox[2]);
	TextDrawHideForPlayer(playerid, dmBox[3]);
	TextDrawHideForPlayer(playerid, dmBox[4]);
	TextDrawHideForPlayer(playerid, dmBox[5]);
	TextDrawHideForPlayer(playerid, dmBox[6]);

	PlayerTextDrawHide(playerid, playerData[playerid][dmArena][0]);
	PlayerTextDrawHide(playerid, playerData[playerid][dmArena][1]);
	PlayerTextDrawHide(playerid, playerData[playerid][dmArena][2]);
	PlayerTextDrawHide(playerid, playerData[playerid][dmArena][3]);

	if(playerData[playerid][playerLoggedIn])
	{
		if(playerData[playerid][playerIsSpectating] || playerData[playerid][isInDuel] || playerData[playerid][isInFallout]  || playerData[playerid][onRace1])
		{
			// Fix for weapons with unlimited ammo not working correctly after specoff
		    ResetPlayerWeapons(playerid);

			for (new i = 0; i < 13; i++)
			{
				if(playerData[playerid][previousWeapons][i])
				{
					GivePlayerWeaponEx(playerid, playerData[playerid][previousWeapons][i], playerData[playerid][previousAmmoLots][i]);
				}
			}

			SetPlayerVirtualWorld(playerid, playerData[playerid][previousVirtualWorld]);
			SetPlayerInterior(playerid, playerData[playerid][previousInteriorWorld]);

			SetPlayerPos(playerid, playerData[playerid][previousX], playerData[playerid][previousY], playerData[playerid][previousZ]);

			SetPlayerHealth(playerid, playerData[playerid][previousHealth]);
			SetPlayerArmour(playerid, playerData[playerid][previousArmour]);

			// Disable admin duty
			if(playerData[playerid][playerAdminDuty])
			{
			    SendClientMessage(playerid, COLOR_WHITE, "{6AEE39}[ADMIN] {FFFFFF}You're now an off duty administrator.");
				playerData[playerid][playerAdminDuty] = false;
				SetPlayerHealth(playerid, 100);
				newPlayerColour(playerid);
				TextDrawHideForPlayer(playerid, Text:AdminDuty);
				Delete3DTextLabel(playerData[playerid][playerAdminLabel]);
			}
            playerData[playerid][isInDuel] = false;
			playerData[playerid][playerIsSpectating] = false;
			playerData[playerid][isInFallout] = false;
			playerData[playerid][isInEvent] = false;
			//playerData[playerid][onDerby] = false;
			playerData[playerid][isInlms] = false;
			playerData[playerid][isInCVR] = false;
			playerData[playerid][isinFREEFORALL] = false;
			//playerData[playerid][onRace1] = false;
		}
		else
		{
		    if (!playerData[playerid][hasSpawned])
		    {
		        if (!playerData[playerid][isInDM] || !playerData[playerid][isInCVR])
		        {
					// Reset some vars
					playerData[playerid][hasSpawned] = true;
			        SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
					ResetPlayerWeapons(playerid);
					SetPlayerHealth(playerid, 100.0);
					playerData[playerid][playerLastTicket] = -1;
					playerData[playerid][pEnterHouse] = true;
					playerData[playerid][pEnterBusiness] = true;
					playerData[playerid][selectingClass] = false;
			        playerData[playerid][canUseCommands] = true;
					playerData[playerid][canBreakCuffs] = true;
					playerData[playerid][adminWeapon] = false;
					playerData[playerid][playerIsCuffed] = false;
					playerData[playerid][canBreakIn] = true;
					playerData[playerid][isInEvent] = false;
					playerData[playerid][isInlms] = false;
					playerData[playerid][isInCVR] = false;

					// Show textdraws
					TextDrawShowForPlayer(playerid, Text:URLTD);
					TextDrawShowForPlayer(playerid, Text:MOTDTD);

					// Untie on spawn
					if (playerData[playerid][playerIsTied])
					{
						playerData[playerid][playerIsTied] = false;
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						KillTimer(playerData[playerid][untieTimer]);

						// Delete the kidnapped label
						if (playerData[playerid][kidnappedLabel])
						{
							Delete3DTextLabel(playerData[playerid][kidnappedLabel]);
						}
					}

					// Apply custom skin
			        if (playerData[playerid][playerCustomSkin] != -1)
			        {
			            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SKIN] {FFFFFF}You have spawned with a custom skin. Type {FFDC2E}/resetskin {FFFFFF}to remove the custom skin.");
			            SetPlayerSkin(playerid, playerData[playerid][playerCustomSkin]);
					}

					switch(playerData[playerid][playerClass])
					{

				  		case CLASS_CIVILIAN:
				    	{
			   				SetPlayerColor(playerid, CLASS_CIVILIAN_COLOUR);
				     		SetPlayerWantedLevel(playerid, playerData[playerid][playerWantedLevel]);
				     		SetPlayerTeam(playerid, NO_TEAM);

							newPlayerColour(playerid);
							playerData[playerid][playerCanRape] = true;
							playerData[playerid][playerCanRob] = true;

							switch(playerData[playerid][playerJob])
							{
								case -1:
								{
									new jobList[500];
									format(jobList, sizeof(jobList), "%s\n{D87C3E}Kidnapper {FFFFFF}- Kidnap players for a ransom and XP.", jobList);
									format(jobList, sizeof(jobList), "%s\n{D87C3E}Mechanic {FFFFFF}- Upgrade or repair player vehicles.", jobList);
									format(jobList, sizeof(jobList), "%s\n{D87C3E}Gun Dealer {FFFFFF}- Sell weapons to players for cash.", jobList);
									format(jobList, sizeof(jobList), "%s\n{D87C3E}Rapist {FFFFFF}- Rape players and give them STDs.", jobList);
									format(jobList, sizeof(jobList), "%s\n{D87C3E}Hitman {FFFFFF}Complete hit contracts for cash.", jobList);
                                    format(jobList, sizeof(jobList), "%s\n{D87C3E}Drug Dealer {FFFFFF}Sell weed to players for cash.", jobList);
                                    format(jobList, sizeof(jobList), "%s\n{D87C3E}Terrorist {FFFFFF}- Blow up the jail cells / bank.", jobList);

									ShowPlayerDialog(playerid, DIALOG_JOBSELECT, DIALOG_STYLE_LIST, "Job Selection", jobList, "Choose", "Close");
								}
								case JOB_MECHANIC:
								{
									playerData[playerid][playerCanRepair] = true;
									playerData[playerid][playerCanFlip] = true;
									playerData[playerid][playerCanNOS] = true;
									playerData[playerid][playerCanREMP] = true;

						     		// weapons
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick

									SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[JOB] {FFFFFF}Use {FFDC2E}/mech {FFFFFF}to see a list of available commands.");
								}
								case JOB_KIDNAPPER:
								{
									playerData[playerid][playerCanKidnap] = true;

						     		// weapons
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick

									SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[JOB] {FFFFFF}Tie players and {FFDC2E}/kidnap {FFFFFF}them to earn XP and even a ransom!");
								}
								case JOB_HITMAN:
								{
									// Disable tracker
									PlayerTextDrawHide(playerid, PlayerText:playerData[playerid][playerTracker]);
									playerData[playerid][playerIsTracking] = false;
									KillTimer(playerData[playerid][playerHitmanTrackerTimer]);

						     		// weapons
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick

									SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[JOB] {FFFFFF}Use {FFDC2E}/track {FFFFFF}to track players on the {FFDC2E}/hitlist{FFFFFF}.");
								}
								case JOB_PROSTITUTE: // Prostitute
								{
									playerData[playerid][playerJob] = JOB_PROSTITUTE;

						     		// weapons
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick
								}
								case JOB_WEAPONDEALER:
								{
						     		// weapons
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick

									SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[JOB] {FFFFFF}Use {FFDC2E}/sellgun {FFFFFF}to offer weapons to players.");
								}
								case JOB_DRUGDEALER:
								{
						     		// weapons
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick

									SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[JOB] {FFFFFF}Use {FFDC2E}/sellweed {FFFFFF}whilst in an ice cream truck to sell drugs to players.");
								}
								case JOB_RAPIST:
								{
						     		// weapons
						     		GivePlayerWeaponEx(playerid, 10, 1); // Dildo
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick

									SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[JOB] {FFFFFF}Use {FFDC2E}/rape {FFFFFF}to infect players with an STD.");
								}
								case JOB_TERRORIST:
								{
						     		// weapons
									GivePlayerWeaponEx(playerid, 22, 250); // Pistol
									GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
									GivePlayerWeaponEx(playerid, 29, 250); // mp5
									GivePlayerWeaponEx(playerid, 2, 1); // golf stick
									
									SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[TERRORIST] {FFFF00}Use {FFDC2E}/plantc4 {FFFFFF}whilst in possession of explosives to blow up objectives such as the bank vault, or the jail.");

								}
							}
						}

					    case CLASS_MEDIC:
					    {
					        newPlayerColour(playerid);
			                SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[JOB] {FFFFFF}Use {FFDC2E}/cure {FFFFFF}to remove STDs from players and {FFDC2E}/heal {FFFFFF}to give health to a player.");

			                KillTimer(playerData[playerid][rehealTimer]);
			                KillTimer(playerData[playerid][recureTimer]);

			                playerData[playerid][canHeal] = true;
			                playerData[playerid][canCure] = true;

		                	SetPlayerTeam(playerid, NO_TEAM);
					    }

						case CLASS_POLICE:
				  		{
				  		    PlayerTextDrawSetString(playerid, playerData[playerid][wantedStars], " ");

				  		    if(playerData[playerid][playerCopTutorial] != 1)
				  		    {
				  		        SetPlayerVirtualWorld(playerid, 1);
								SetPlayerCameraPos(playerid, -1581.7755, 749.6948, 30.6389);
								SetPlayerCameraLookAt(playerid, -1605.5656, 717.6979, 11.9861);

								// Part 1 of the tutorial
								new string[600];
								format(string, sizeof(string), "%s{98B0CD}Police Classes \n", string);
			 					format(string, sizeof(string), "%s{FFFFFF}Playing as a law enforcement officer on this server is similar to other CNR game modes.\n", string);
			 					format(string, sizeof(string), "%s{FFFFFF}For those who aren't familiar with the commands, please see /commands after this tutorial\n", string);
			 					format(string, sizeof(string), "%s{FFFFFF}has concluded. This tutorial will act as a simple guide on how to act whilst playing as a cop.\n\n", string);

			 					format(string, sizeof(string), "%s{FFFFFF}There are 4 LEO classes. These include cop, CIA, FBI and army, \nthough army has seperate rules.", string);
			 					format(string, sizeof(string), "%s{FFFFFF}Each class requires an increased amount of XP,\nwhich can be seen when trying to spawn to a class.\n", string);

								ShowPlayerDialog(playerid, POLICE_TUTORIAL_1, DIALOG_STYLE_MSGBOX, "Police Tutorial - Introduction", string, "Next", "");
				  		    }

				    	    SetPlayerColor(playerid, CLASS_POLICE_COLOUR);
					        SetPlayerWantedLevel(playerid, 0);
					        playerData[playerid][playerCanTaze] = true;
					        playerData[playerid][playerCanArrest] = true;
			         	    playerData[playerid][playerCanCuff] = true;

			         	    // weapons
			         	    GivePlayerWeaponEx(playerid, 3, 1); // Night stick
			         	    GivePlayerWeaponEx(playerid, 22, 250); // Pistol
			         	    GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
			         	    GivePlayerWeaponEx(playerid, 31, 250); // M4
			         	    GivePlayerWeaponEx(playerid, 41, 250); // Spray

							SetPlayerTeam(playerid, TEAM_LEO);
				    	}

						case CLASS_ARMY:
						{
							SetPlayerColor(playerid, CLASS_ARMY_COLOUR);
							SetPlayerWantedLevel(playerid, 0);
					        playerData[playerid][playerCanTaze] = true;
					        playerData[playerid][playerCanArrest] = true;
			         	    playerData[playerid][playerCanCuff] = true;

			         	    // weapons
			         	    GivePlayerWeaponEx(playerid, 3, 1); // Night stick
			         	    GivePlayerWeaponEx(playerid, 22, 250); // Pistol
			         	    GivePlayerWeaponEx(playerid, 27, 250); // Shotgun
			         	    GivePlayerWeaponEx(playerid, 31, 250); // M4
			         	    GivePlayerWeaponEx(playerid, 16, 5); // Grenades
			         	    GivePlayerWeaponEx(playerid, 41, 250); // Spray

							SetPlayerTeam(playerid, TEAM_LEO);
						}

						case CLASS_FBI:
						{
							SetPlayerColor(playerid, CLASS_FBI_COLOUR);
							SetPlayerWantedLevel(playerid, 0);
					        playerData[playerid][playerCanTaze] = true;
					        playerData[playerid][playerCanArrest] = true;
			         	    playerData[playerid][playerCanCuff] = true;

			         	    // weapons
			         	    GivePlayerWeaponEx(playerid, 3, 1); // Night stick
			         	    GivePlayerWeaponEx(playerid, 32, 300);//smg
			         	    GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
			         	    GivePlayerWeaponEx(playerid, 31, 250); // M4
			         	    GivePlayerWeaponEx(playerid, 41, 250); // Spray

							SetPlayerTeam(playerid, TEAM_LEO);
						}

						case CLASS_CIA:
						{
							SetPlayerColor(playerid, CLASS_CIA_COLOUR);
							SetPlayerWantedLevel(playerid, 0);
					        playerData[playerid][playerCanTaze] = true;
					        playerData[playerid][playerCanArrest] = true;
			         	    playerData[playerid][playerCanCuff] = true;
			         	    playerData[playerid][playerCanEMP] = true;

			         	    // weapons
			         	    GivePlayerWeaponEx(playerid, 27, 250); // Shotgun
			         	    GivePlayerWeaponEx(playerid, 31, 250); // M4
			         	    GivePlayerWeaponEx(playerid, 32, 300); // Silenced Pistol
			         	    GivePlayerWeaponEx(playerid, 41, 250); // Spray

							SetPlayerTeam(playerid, TEAM_LEO);
						}

						case CLASS_SECRETSERVICE:
						{
							SetPlayerColor(playerid, CLASS_SECRETSERVICE_COLOUR);
							SetPlayerWantedLevel(playerid, 0);
					        playerData[playerid][playerCanTaze] = true;
					        playerData[playerid][playerCanArrest] = true;
			         	    playerData[playerid][playerCanCuff] = true;
			         	    playerData[playerid][playerCanEMP] = true;

			         	    // weapons
			         	    GivePlayerWeaponEx(playerid, 27, 250); // Shotgun
			         	    GivePlayerWeaponEx(playerid, 31, 250); // M4
			         	    GivePlayerWeaponEx(playerid, 23, 250); // Silenced Pistol
			         	    GivePlayerWeaponEx(playerid, 41, 250); // Spray

							SetPlayerTeam(playerid, TEAM_LEO);
						}

						case CLASS_FIREFIGHTER:
						{
						    PlayerTextDrawSetString(playerid, playerData[playerid][wantedStars], " ");
							GivePlayerWeaponEx(playerid, 42, 999999);
                            GivePlayerWeaponEx(playerid, 9, 1);
                            GivePlayerWeaponEx(playerid, 25, 250); // Shotgun
                            GivePlayerWeaponEx(playerid, 22, 250); // Pistol
							SetPlayerColor(playerid, CLASS_FIREFIGHTER_COLOUR);
							SetPlayerTeam(playerid, NO_TEAM);
						}

			  		}

			  		// Check if the player should be jailed
			  		if (playerData[playerid][playerJailTime] > 0)
			  		{
			  		    // Send player back to jail
			            new MsgAll[255], Name[24];
			            GetPlayerName(playerid, Name, sizeof(Name));
			            sendPlayerJail(playerid, playerData[playerid][playerJailTime], playerid, 0);

			            for(new p; p < MAX_PLAYERS; p++)
			            {
			                new pName[24];
			                GetPlayerName(p, pName, sizeof(pName));

			                if(!strcmp(pName, Name))
			                {
			                    SendClientMessage(p, COLOR_WHITE, "{FFDC2E}[JAIL] {FFFFFF}You have been returned to jail {6AEE39}[Sentence incomplete]");
			                }
			                else
			                {
			                    format(MsgAll, sizeof(MsgAll), "{FFDC2E}[JAIL] {FFFFFF}%s(%i) has been returned to jail {6AEE39}[Sentence incomplete]", Name, playerid);
			                    SendClientMessage(p, COLOR_WHITE, MsgAll);
			                }
						}
			    	}
			    	else
			    	{
			    	    if (playerData[playerid][spawnHouse] != -1)
			    	    {
							SpawnInHouse(playerid);
			    	    }
			    	    else
			    	    {
							new Float:bX, Float:bY, Float:bZ, Float:bA;

							switch(playerData[playerid][playerClass])
							{
							    case CLASS_CIVILIAN:
							    {
							   	 	new rand = random(10);

									switch(rand)
									{
									    case 0: // Downtown
									    {
											bX = -1753.0121;
											bY = 959.8522;
											bZ = 24.8828;
											bA = 178.4489;
										}
										case 1: // Financial (previously Jizzy's)
										{
											bX = -2613.6169;
											bY = 1394.1506;
											bZ = 7.1016;
											bA = 234.9960;
										}
										case 2: // Queens
										{
											bX = -2515.1592;
											bY = -25.7249;
											bZ = 25.6172;
											bA = 270.9635;
										}
										case 3: // front of station
										{
											bX = -2026.9011;
											bY = 156.6973;
											bZ = 29.0391;
											bA = 268.3445;
										}
										case 4: // Wang Cars
										{
											bX = -1973.4545;
											bY = 285.1178;
											bZ = 35.1719;
											bA = 90.7997;
										}
										case 5: // Downtown
										{
											bX = -1753.0121;
											bY = 959.8522;
											bZ = 24.8828;
											bA = 178.4489;
										}
										case 6: // New Burger Shot
										{
											bX = -1737.5981;
											bY = 1088.2644;
											bZ = 45.4453;
											bA = 92.5431;
										}
										case 7: // Opposite Hotel
										{
										    bX = -1761.2441;
										    bY = 886.1064;
											bZ = 25.0859;
											bA = 1.1142;
										}
										case 8: // supa
										{
										    bX = -2408.3848;
										    bY = 722.6746;
											bZ = 38.2734;
											bA = 183.2269;
										}
										case 9: // Mini games
										{
										    bX = -1559.0730;
										    bY = 1183.0647;
											bZ = 7.1875;
											bA = 91.3203;
										}
									}
							    }
							    
								case CLASS_FIREFIGHTER:
								{
								    bX = -2022.5040;
								    bY = 67.2138;
								    bZ = 28.4727;
								    bA = 275.3965;
								}

								case CLASS_MEDIC:
								{
									new rand = random(2);

									switch (rand)
									{
									    case 0:
									    {
							   	 			bX = -2656.0061;
							   	 			bY = 635.7116;
							   	 			bZ = 14.4531;
							   	 			bA = 183.0843;
										}

										case 1:
										{
							   	 			bX = -1992.5721;
							   	 			bY = 1041.8290;
							   	 			bZ = 55.7122;
							   	 			bA = 290.5727;
										}
									}
								}

							    case CLASS_POLICE:
							    {
					      			bX = -1587.1221;
					  				bY = 721.9797;
									bZ = -4.9063;
									bA = 213.6375;
							    }

							    case CLASS_FBI:
							    {
					      			bX = -2572.1018;
					  				bY = 615.5872;
									bZ = 14.4592;
									bA = 177.8514;
								}

							    case CLASS_CIA:
							    {
					      			bX = -2430.0920;
					  				bY = 526.0110;
									bZ = 30.3828;
									bA = 177.0840;
								}

							    case CLASS_ARMY:
							    {
					      			bX = -1605.8867;
					  				bY = 285.6808;
									bZ = 7.1875;
									bA = 7.2846;
								}

							    case CLASS_SECRETSERVICE:
							    {
					      			bX = -1757.6335;
					  				bY = 786.7766;
									bZ = 167.6563;
									bA = 269.0399;
								}
							}

					  		SetPlayerPos(playerid, bX, bY, bZ);
					  		SetPlayerFacingAngle(playerid, bA);
						}
					}
					
					// Remove player from gang when swapping from civi to leo
					if(playerData[playerid][playerClass] != CLASS_CIVILIAN && playerData[playerid][playerGangID] != INVALID_GANG_ID)
					{
						cmd_g(playerid, "leave");
					}

					// Disable admin duty on spawn
					if(playerData[playerid][playerAdminDuty])
					{
					    SendClientMessage(playerid, COLOR_WHITE, "{6AEE39}[ADMIN] {FFFFFF}You're now an off duty administrator.");
						playerData[playerid][playerAdminDuty] = false;
						SetPlayerHealth(playerid, 100);
						newPlayerColour(playerid);
						TextDrawHideForPlayer(playerid, Text:AdminDuty);
						Delete3DTextLabel(playerData[playerid][playerAdminLabel]);
					}

					if (playerData[playerid][playerVIPLevel] >= 2)
					{
						if (playerData[playerid][playerVIPLevel] == 2)
						{
					    	SetPlayerArmour(playerid, 50); // Silver
						}
						else
						{
						    SetPlayerArmour(playerid, 99); // Gold
						}
					}

					if (playerData[playerid][playerVIPLevel] >= 2)
					{
					    if (playerData[playerid][vipWeapon] == 0)
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "{58D3F7}[VIP WEAPON] {FFFFFF}You haven't selected a spawn weapon, to do so type {FFDC2E}/vipweapon{FFFFFF}!");
						}
						else
						{
						    switch(playerData[playerid][vipWeapon])
						    {
								case 24: // Deagle
								{
									GivePlayerWeaponEx(playerid, 24, 6666);
									playerData[playerid][vipWeapon] = 24;
								}
								case 31: // M4
								{
									GivePlayerWeaponEx(playerid, 31, 6666);
									playerData[playerid][vipWeapon] = 31;
								}
								case 34: // Sniper
								{
									GivePlayerWeaponEx(playerid, 34, 6666);
									playerData[playerid][vipWeapon] = 34;
								}
								case 26: // Sawnoff
								{
									GivePlayerWeaponEx(playerid, 26, 6666);
									playerData[playerid][vipWeapon] = 26;
								}
								case 9: // Chainsaw
								{
									GivePlayerWeaponEx(playerid, 9, 1);
									playerData[playerid][vipWeapon] = 9;
								}
								case 29: // MP5
								{
									GivePlayerWeaponEx(playerid, 29, 6666);
									playerData[playerid][vipWeapon] = 29;
								}
								case 27: // Combat Shotgun
								{
									GivePlayerWeaponEx(playerid, 27, 6666);
									playerData[playerid][vipWeapon] = 27;
								}
								case 28: // Micro SMG
								{
									GivePlayerWeaponEx(playerid, 28, 6666);
									playerData[playerid][vipWeapon] = 28;
								}
							}
						}
					}

					// Not dead
					playerData[playerid][playerDied] = false;

					// Double XP textdraw
					if(serverInfo[doubleXP])
					{
					    TextDrawShowForPlayer(playerid, doubleXPTD);
					}

					// Weapon Skills
					if (playerData[playerid][weaponSkill] == 1)
					{
                        SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
					}
					else
					{
					    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
					}

					// Easter
					if(serverInfo[huntOn] == 5)
					{
					    TextDrawShowForPlayer(playerid, easterSunday);
					    PlayerTextDrawShow(playerid, playerData[playerid][Eggs][0]);
					    PlayerTextDrawShow(playerid, playerData[playerid][Eggs][1]);
					    PlayerTextDrawShow(playerid, playerData[playerid][Eggs][2]);
					}

					// Remove some labels
					Delete3DTextLabel(playerData[playerid][weedLabel]);

					// Anti-spawn kill
					if (playerData[playerid][playerJailTime] < 1)
					{
						SetPlayerHealth(playerid, 5000.0);
						playerData[playerid][spawnLabel] = Create3DTextLabel("JUST SPAWNED", 0xFFDC2EFF, 30.0, 40.0, 50.0, 60.0, -1, 1);
		        		Attach3DTextLabelToPlayer(playerData[playerid][spawnLabel], playerid, 0.0, 0.0, 0.4);
		        		SetTimerEx("AntiSpawnkill", 5000, 0, "i", playerid);
					}

	        		// Money
	        		ResetPlayerMoney(playerid);
	        		GivePlayerMoney(playerid, playerData[playerid][playerMoney]);

	        		// Trucking
					playerData[playerid][canTruck] = true;
					KillTimer(playerData[playerid][retruckTimer]);
				}
				else // is in a dm event
				{
					SetPlayerHealth(playerid, 10000.0);
					Delete3DTextLabel(playerData[playerid][spawnLabel]);
					playerData[playerid][spawnLabel] = Create3DTextLabel("SPAWN PROTECTED", 0xFFDC2EFF, 30.0, 40.0, 50.0, 40.0, 0);
	        		Attach3DTextLabelToPlayer(playerData[playerid][spawnLabel], playerid, 0.0, 0.0, 0.4);
	        		SetTimerEx("AntiSpawnkill", 1500, 0, "i", playerid);

					new randSpawn = random(8);
					switch(randSpawn)
					{
						case 0:
						{
							SetPlayerPos(playerid, -1129.8909, 1057.5424, 1346.4141);
						}
						case 1:
						{
							SetPlayerPos(playerid, -974.1805, 1077.0630, 1344.9895);
						}
						case 2:
						{
							SetPlayerPos(playerid, -997.8885, 1096.0400, 1342.6517);
						}
						case 3:
						{
							SetPlayerPos(playerid, -1036.1115, 1024.3964, 1343.3551);
						}
						case 4:
						{
							SetPlayerPos(playerid, -1075.6144, 1032.7413, 1342.7317);
						}
						case 5:
						{
							SetPlayerPos(playerid, -1085.2362, 1053.7657, 1343.3536);
						}
						case 6:
						{
							SetPlayerPos(playerid, -1101.0815, 1084.6434, 1341.8438);
						}
						case 7:
						{
							SetPlayerPos(playerid, -1093.1536, 1058.8173, 1341.3516);
						}
					}

					// No team during DM
					SetPlayerTeam(playerid, NO_TEAM);

					SetPlayerInterior(playerid, 10);
					SetPlayerVirtualWorld(playerid, 169);

					playerData[playerid][isInDM] = true; // Prevent scores etc - also respawn
					playerData[playerid][isInEvent] = true;
					playerData[playerid][adminWeapon] = true; // Prevent anti-cheat kick
					GivePlayerWeaponEx(playerid, 31, 50000);

					TextDrawShowForPlayer(playerid, dmBox[0]);
					TextDrawShowForPlayer(playerid, dmBox[1]);
					TextDrawShowForPlayer(playerid, dmBox[2]);
					TextDrawShowForPlayer(playerid, dmBox[3]);
					TextDrawShowForPlayer(playerid, dmBox[4]);
					TextDrawShowForPlayer(playerid, dmBox[5]);
					TextDrawShowForPlayer(playerid, dmBox[6]);

					PlayerTextDrawShow(playerid, playerData[playerid][dmArena][0]);
					PlayerTextDrawShow(playerid, playerData[playerid][dmArena][1]);
					PlayerTextDrawShow(playerid, playerData[playerid][dmArena][2]);
					PlayerTextDrawShow(playerid, playerData[playerid][dmArena][3]);

					dmStats(playerid);

					SendClientMessage(playerid, COLOR_RED, "{58D3F7}[MINIGAME] {FFFFFF}You've respawned into the Paintball Arena, Type {FFDC2E}/leavepb {FFFFFF}to leave the arena.");

				    newPlayerColour(playerid);
				    playerData[playerid][hasSpawned] = true;
				    playerData[playerid][playerDied] = false;
				}
			}
		}
	}
	else // Must login before spawning
	{
        SendClientMessage(playerid, COLOR_RED, "{B7B7B7}[SERVER] {FFFFFF}You cannot spawn without logging in!");
	    return 0;
	}

	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	 KillTimer(playerData[playerid][skydiveTimer]);
		for(new x = 0; x < MAX_OSLOTS; x++)
		{
			if(playerData[playerid][toyStatus][x])
			{
				if(IsPlayerAttachedObjectSlotUsed(playerid, x))
				{
					RemovePlayerAttachedObject(playerid, x);
				}
			}
		}

    ApplyAnimation(playerid, "PED", "KO_shot_front",4.1,0,1,1,1,1);
    Delete3DTextLabel(playerData[playerid][kidnappedLabel]);

    playerData[playerid][hasSpawned] = false;
	playerData[playerid][ctpImmune] = true;
	playerData[playerid][abImmune] = true;

    if (playerData[playerid][isInDM] || playerData[playerid][isInDuel] || playerData[playerid][isInCVR] || playerData[playerid][isinFREEFORALL] || playerData[playerid][onRace1])
    {
        playerData[playerid][isInDuel] = false;
		playerData[playerid][hasSpawned] = false;
		playerData[playerid][suicide] = false;
		playerData[playerid][isinFREEFORALL] = false;
		playerData[playerid][isInCVR] = false;
		playerData[playerid][onRace1] = false;

		if (killerid != INVALID_PLAYER_ID)
		{
		    playerData[killerid][dmKills]++;
		    //playerData[killerid][dmStreak]++;
		    dmStats(killerid);

		    //gangDeath(playerid, killerid, reason);

			new randDeath = random(1), randomDeath[200];
			switch(randDeath)
			{
			    case 0:
			    {
					format(randomDeath, sizeof(randomDeath), "killed");
				}
			}

            if(playerData[killerid][isInDuel])
		    {
		        new duelMSG[256];
				//playerData[killerid][isInDuel] = false;
				SpawnPlayer(killerid);
				//SetPlayerInterior(killerid, playerData[killerid][previousVirtualWorld]);
				//SetPlayerVirtualWorld(killerid, playerData[killerid][previousInteriorWorld]);
				//SetPlayerPos(killerid,  playerData[killerid][previousX], playerData[killerid][previousY], playerData[killerid][previousZ]); // Done
		        format(duelMSG, sizeof(duelMSG), "{00FF00}[DUEL]{FAAC58} %s(%i) {FFFFFF}%s {FAAC58}%s(%i)", playerData[killerid][playerNamee], killerid, randomDeath, playerData[playerid][playerNamee], playerid);
		        SendClientMessageToAll(COLOR_WHITE, duelMSG);
		    }
		    if (playerData[playerid][isInlms] || playerData[playerid][isInCVR])
		    {
		        playerData[playerid][isInlms] = false;
		        playerData[playerid][isInCVR] = false;
		    }
		        
			for (new i=0; i<MAX_PLAYERS; i++)
			{
				if(playerData[i][isInDM])
				{
					new dmKill[100];
					format(dmKill, sizeof(dmKill), "{FAAC58}%s(%i) {FFFFFF}%s {FAAC58}%s(%i)", playerData[killerid][playerNamee], killerid, randomDeath, playerData[playerid][playerNamee], playerid);
					SendClientMessage(i, COLOR_WHITE, dmKill);
				}
			}
		}

	    playerData[playerid][dmDeaths]++;
	    //playerData[playerid][dmStreak] = 0;
		KillTimer(playerData[playerid][streakTimer]);
		disableStreak(playerid);
	    dmStats(playerid);
    }
    else
    {
		if(!playerData[playerid][playerDied])
		{
			new vid = GetPlayerVehicleID(killerid);

	        if (killerid != INVALID_PLAYER_ID && GetPlayerWeapon(killerid) != reason && reason != 54 && reason != 50 && reason != 53 && !playerData[playerid][suicide] && GetVehicleModel(vid) != 520 && GetVehicleModel(vid) != 447)
	        {
	            if (reason == 49 && IsPlayerInAnyVehicle(killerid))
	            {
					return 1;
				}

	            else if (reason == 51 && IsPlayerInAnyVehicle(playerid))
	            {
					return 1;
				}

				else
				{
					new string[600];

					format(string, sizeof(string), "%s{98B0CD}Invalid Death Detected \n", string);
					format(string, sizeof(string), "%s{FFFFFF}The server does not recognise the reason for your death. \n", string);
					format(string, sizeof(string), "%s{FFFFFF}To prevent stat loss, we have an anti-fake kill system in place. \n\n", string);
					format(string, sizeof(string), "%s{FFFFFF}If you have respawned at the bank with no weapons, click respawn. \n\n", string);

					ShowPlayerDialog(playerid, DIALOG_FORCE_RESPAWN, DIALOG_STYLE_MSGBOX, "", string, "RESPAWN", "CANCEL");

					return 0;
				}
	        }

		    SendDeathMessage(killerid, playerid, reason);

		    if(playerData[playerid][playerLoggedIn])
			{
			    if(playerData[playerid][isInEvent] || playerData[playerid][isInEvent])
			    {
			        playerData[playerid][isInEvent] = false;
			        playerData[playerid][isInCVR] = false;
			        playerData[playerid][hasSpawned] = false;
			        newPlayerColour(playerid);
		 			playerData[playerid][playerDeaths]++;
			    	playerData[playerid][playerWantedLevel] = 0;
			    	SetPlayerWantedLevel(playerid, 0);
			    	playerData[playerid][hasSTD] = false;
			    	KillTimer(playerData[playerid][rapedTimer]);
				}
				else
				{
			        if(IsPlayerConnected(killerid))
			        {
			            if(playerData[killerid][playerLoggedIn])
			            {
			                playerData[killerid][playerKills] = playerData[killerid][playerKills] + 1;
							playerData[killerid][playerScore] = playerData[killerid][playerScore] + 1;
							SetPlayerScore(killerid, playerData[killerid][playerScore]);

							playerGiveXP(playerid, 5);

							if (playerData[killerid][playerKills] == 1)
							{
							    disableAchieve(killerid);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve1]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve2]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve3]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve4]);

								PlayerTextDrawSetString(killerid, playerData[killerid][Achieve3], "First Kill");
								PlayerTextDrawSetString(killerid, playerData[killerid][Achieve4], "You killed your first victim. Well done.");
								PlayerPlaySound(killerid, 1183 ,0.0, 0.0, 0.0);

								playerData[playerid][achieveTimer] = SetTimerEx("disableAchieve", 8000, false, "i", killerid);

								// XP/SCORE AWARD
								playerGiveXP(playerid, 50);
								playerData[playerid][playerScore] = playerData[playerid][playerScore] + 2;
								SetPlayerScore(playerid, playerData[playerid][playerScore]);
							}
							else if (playerData[killerid][playerKills] == 50)
							{
							    disableAchieve(killerid);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve1]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve2]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve3]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve4]);

								PlayerTextDrawSetString(killerid, playerData[killerid][Achieve3], "San Fierro Killer");
								PlayerTextDrawSetString(killerid, playerData[killerid][Achieve4], "You've killed 50 players! Nice!");
								PlayerPlaySound(killerid, 1183 ,0.0, 0.0, 0.0);

								playerData[playerid][achieveTimer] = SetTimerEx("disableAchieve", 8000, false, "i", killerid);

								// XP/SCORE AWARD
								playerGiveXP(playerid, 50);
								playerData[playerid][playerScore] = playerData[playerid][playerScore] + 2;
								SetPlayerScore(playerid, playerData[playerid][playerScore]);
							}
							else if (playerData[killerid][playerKills] == 500)
							{
							    disableAchieve(killerid);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve1]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve2]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve3]);
								PlayerTextDrawShow(killerid, playerData[killerid][Achieve4]);

								PlayerTextDrawSetString(killerid, playerData[killerid][Achieve3], "Mass Murderer");
								PlayerTextDrawSetString(killerid, playerData[killerid][Achieve4], "500 kills attained. You require medical assistance.");
								PlayerPlaySound(killerid, 1183 ,0.0, 0.0, 0.0);

								playerData[playerid][achieveTimer] = SetTimerEx("disableAchieve", 8000, false, "i", killerid);

								// XP/SCORE AWARD
								playerGiveXP(playerid, 50);
								playerData[playerid][playerScore] = playerData[playerid][playerScore] + 2;
								SetPlayerScore(playerid, playerData[playerid][playerScore]);
							}

							if(playerData[killerid][playerClass] == CLASS_CIVILIAN || playerData[killerid][playerClass] == CLASS_MEDIC || playerData[killerid][playerClass] == CLASS_FIREFIGHTER)
							{
								new message[128];
								playerData[killerid][playerWantedLevel] = playerData[killerid][playerWantedLevel] + 12;
								SetPlayerWantedLevel(killerid, playerData[killerid][playerWantedLevel] + 12);
								format(message, sizeof(message), "{FFDC2E}[MURDER] {FFFFFF}You have just killed %s(%i)!", playerData[playerid][playerNamee], playerid, playerData[killerid][playerWantedLevel]);
								SendClientMessage(killerid, COLOR_WHITE, message);
								sendWantedMessage(killerid, 12);
								newPlayerColour(killerid);
								if(playerData[killerid][playerGang] != playerData[playerid][playerGang] && playerData[killerid][playerGang] != -1)
								{
									new gang = playerData[killerid][playerGang];
									gangData[gang][gangKill]++;
									gangData[gang][gangScore]++;
									if(playerData[playerid][playerGang] != -1)
									{
										gang = playerData[playerid][playerGang];
										gangData[gang][gangDeath]++;
									}
								}

								if(playerData[killerid][playerJob] == JOB_HITMAN && playerData[killerid][playerClass] != CLASS_MEDIC && playerData[killerid][playerClass] != CLASS_FIREFIGHTER)
								{
									if(playerData[playerid][playerHitValue] > 0)
									{
									    playerData[killerid][hitsCompleted] = playerData[killerid][hitsCompleted] + 1;
										playerGiveMoney(killerid, playerData[playerid][playerHitValue]);
										format(message, sizeof(message), "{FFDC2E}[CONTRACT] {FFFFFF}%s(%i) has completed the contract on %s(%i) and earnt {FFDC2E}$%s", playerData[killerid][playerNamee], killerid, playerData[playerid][playerNamee], playerid, FormatNumber(playerData[playerid][playerHitValue]));
										SendClientMessageToAll(COLOR_WHITE, message);

										new loggingString[256];
										format(loggingString, sizeof(loggingString), "%s completed the contract on %s for %d.", playerData[killerid][playerNamee], playerData[playerid][playerNamee], playerData[playerid][playerHitValue]);
										writeInLog("contractLog.html", loggingString);

										playerData[playerid][playerHitValue] = 0;

										if (playerData[killerid][hitsCompleted] == 1)
										{
										    disableAchieve(killerid);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve1]);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve2]);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve3]);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve4]);

											PlayerTextDrawSetString(killerid, playerData[killerid][Achieve3], "Contract Killer");
											PlayerTextDrawSetString(killerid, playerData[killerid][Achieve4], "You completed your first hit contract!");
											PlayerPlaySound(killerid, 1183 ,0.0, 0.0, 0.0);

											playerData[playerid][achieveTimer] = SetTimerEx("disableAchieve", 8000, false, "i", killerid);

											// XP/SCORE AWARD
											playerGiveXP(playerid, 50);
											playerData[playerid][playerScore] = playerData[playerid][playerScore] + 2;
											SetPlayerScore(playerid, playerData[playerid][playerScore]);
										}

										if (playerData[killerid][hitsCompleted] == 20)
										{
										    disableAchieve(killerid);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve1]);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve2]);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve3]);
											PlayerTextDrawShow(killerid, playerData[killerid][Achieve4]);

											PlayerTextDrawSetString(killerid, playerData[killerid][Achieve3], "Professional Hitman");
											PlayerTextDrawSetString(killerid, playerData[killerid][Achieve4], "You completed 20 hit contracts!");
											PlayerPlaySound(killerid, 1183 ,0.0, 0.0, 0.0);

											playerData[playerid][achieveTimer] = SetTimerEx("disableAchieve", 8000, false, "i", killerid);

											// XP/SCORE AWARD
											playerGiveXP(playerid, 50);
											playerData[playerid][playerScore] = playerData[playerid][playerScore] + 2;
											SetPlayerScore(playerid, playerData[playerid][playerScore]);
										}
									}
								}

								playerData[killerid][playerLastKill] = GetTickCount();
				           	}

							if(playerData[playerid][playerClass] == CLASS_CIVILIAN || playerData[playerid][playerClass] == CLASS_MEDIC || playerData[playerid][playerClass] == CLASS_FIREFIGHTER)
							{
							    newPlayerColour(playerid);
							}

				           	if(playerData[killerid][playerClass] == CLASS_POLICE || playerData[killerid][playerClass] == CLASS_ARMY || playerData[killerid][playerClass] == CLASS_CIA || playerData[killerid][playerClass] == CLASS_FBI || playerData[killerid][playerClass] == CLASS_SECRETSERVICE)
				           	{
				           	    if(playerData[playerid][playerWantedLevel] == 0)
								{
									if (!playerData[playerid][suicide])
									{
										if (playerData[killerid][playerClass] == CLASS_POLICE || playerData[killerid][playerClass] == CLASS_FBI || playerData[killerid][playerClass] == CLASS_CIA || playerData[killerid][playerClass] == CLASS_SECRETSERVICE)
										{
										    playerData[killerid][innocentKills]++;

										    if (playerData[killerid][innocentKills] > 2)
										    {
										        playerGiveMoney(killerid, -5000);
											}

										    if (playerData[killerid][innocentKills] == 5)
										    {
										        // Cop class ban

												ForceClassSelection(killerid);
												TogglePlayerSpectating(killerid, true);
												TogglePlayerSpectating(killerid, false);

										        playerData[killerid][playerCopBanned] = 1;

	  								        }
											else
											{
											    SetPlayerHealth(killerid, 0.0);
											}

											print("cop");
										}

										if (playerData[killerid][playerClass] == CLASS_ARMY)
										{
										    playerData[killerid][aInnocentKills]++;
										    playerGiveMoney(killerid, -5000);

										    if (playerData[killerid][aInnocentKills] == 3)
										    {
										        // Army class ban

												ForceClassSelection(killerid);
												TogglePlayerSpectating(killerid, true);
												TogglePlayerSpectating(killerid, false);

										        playerData[killerid][playerArmyBanned] = 1;

											}
											else
											{
											    SetPlayerHealth(killerid, 0.0);
											}

											print("army");
										}

										closeDialogs(killerid);

										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill1]);
										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill2]);
										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill3]);
										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill4]);
										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill5]);
										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill6]);
										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill7]);
										PlayerTextDrawShow(killerid, playerData[killerid][InnocentKill8]);
									}
				           	    }
				           	    else if(playerData[playerid][playerWantedLevel] > 0)
				           	    {
									new message[128], earnings;
									earnings = (playerData[playerid][playerWantedLevel] * 200);
									format(message, sizeof(message), "{FFDC2E}[KILL] {FFFFFF}You killed %s(%i) who had a wanted level of %i, you earnt {FFDC2E}$%s!", playerData[playerid][playerNamee], playerid, playerData[playerid][playerWantedLevel], FormatNumber(earnings));
				           	        SendClientMessage(killerid, COLOR_WHITE, message);
									playerGiveMoney(killerid, earnings);

									playerGiveXP(killerid, 5);
									playerData[killerid][copKills] = playerData[killerid][copKills] + 1;

									new loggingString[256];
									format(loggingString, sizeof(loggingString), "%s killed %s for %d.", playerData[killerid][playerNamee], playerData[playerid][playerNamee], earnings);
									writeInLog("copKillLog.html", loggingString);
				           	    }
				           	}
						}
					}

					if(playerData[playerid][iscourier])
					{
						SendClientMessage(playerid, COLOR_WHITE, "{FFDC2E}[COURIER] {FFFFFF}You died, the mission was cancelled.");
						playerData[playerid][iscourier] = false;
						playerData[playerid][playerCourierLevel] = 0;
						DisablePlayerCheckpoint(playerid);
					}

					if (playerData[playerid][truckingStatus] > 0)
					{
						return cmd_canceltrucking(playerid, "");
					}

					if (playerData[playerid][forkliftStatus] > 0)
					{
						return cmd_cancelforklift(playerid, "");
					}

					if (playerData[playerid][busStatus] > 0)
					{
						return cmd_cancelroute(playerid, "");
					}

					playerData[playerid][playerDeaths]++;
					playerData[playerid][playerDied] = true;
			    	playerData[playerid][playerWantedLevel] = 0;
			    	SetPlayerWantedLevel(playerid, 0);
			    	playerData[playerid][hasSTD] = false;
		            KillTimer(playerData[playerid][rapedTimer]);
		            KillTimer(playerData[playerid][uncuffTimer]);
					playerData[playerid][playerIsTied] = false;
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					KillTimer(playerData[playerid][untieTimer]);
					playerData[playerid][hasSpawned] = false;
					playerData[playerid][suicide] = false;

					if (!playerData[playerid][healthInsurance])
					{
						taxplayer(playerid);
					}
			    }
		    }
		}
	}

	return 1;
}

public OnPlayerText(playerid, text[])
{
	if(playerData[playerid][playerLoggedIn])
	{
		if(text[0] == '@' && playerData[playerid][playerLevel] >= 1)
		{
	 	    new string[128];
	 		GetPlayerName(playerid, string, sizeof(string));
	        format(string, sizeof(string), "{47476B}<Admin Chat> {FFFFFF}%s: %s", string, text[1]);
			adminchat(COLOR_WHITE, string);
	        return 0;
	    }
	    else if(text[0] == '#' && playerData[playerid][playerHelper] == 1)
		{
	 	    new string[128];
	 		GetPlayerName(playerid, string, sizeof(string));
	        format(string, sizeof(string), "{A5DF00}[Helper Chat] {FFFFFF}%s: %s", string, text[1]);
			helperchat(COLOR_WHITE, string);
	        return 0;
	    }
	    else
	    {
			if (playerData[playerid][playerMuteTime] != 0)
			{
			    new message[128];
				format(message, sizeof(message), "{FFDC2E}[MUTED] {FFFFFF}You are muted for another {FFDC2E}%i {FFFFFF}seconds and cannot talk!", playerData[playerid][playerMuteTime]);
				SendClientMessage(playerid, COLOR_WHITE, message);
				return 0;
			}
			else
			{
			    if (FindIP(text))
			    {
		            SendClientMessage(playerid, COLOR_WHITE, "{FFDC2E}[SPAM] {FFFFFF}Advert detected! If this occurs frequently, you will be kicked.");
		            playerData[playerid][adDetected]++;
                    new administratorAlert[256];
					format(administratorAlert, sizeof(administratorAlert), "{C73E3E}[ADVERTISING] {FFFFFF}%s(%d): %s", playerData[playerid][playerNamee], playerid, text);
					adminchat(COLOR_WHITE, administratorAlert);
		            if (playerData[playerid][adDetected] == 2)
		            {
		                // Kick
		                KickWithMessage(playerid, "You have been kicked for advertising.");
		            }

		            return 0;
				}


	    		if(strfind(text, "fucker", true) != -1 || strfind(text, "fuck", true) != -1 || strfind(text, "gay", true) != -1)
			    {
		            SendClientMessage(playerid, COLOR_WHITE, "{FFDC2E}[HELP] {FFFFFF}Insulting/Swearing is not allowed in this server!");
		            return 0;
			    }

			    if (playerData[playerid][messageCount] != 3)
			    {
					new chat[400], color[20];

					switch(playerData[playerid][playerClass])
					{
						case 0, 6, CLASS_FIREFIGHTER:
						{
							if(playerData[playerid][playerWantedLevel] == 0)
							{
								if (playerData[playerid][vipColour])
								{
									color = "58D3F7";
								}
								else
								{
									if(playerData[playerid][playerClass] == CLASS_MEDIC)
									{
										// Medic Colour
									    color = "F78181";
									}
									else if(playerData[playerid][playerClass] == CLASS_FIREFIGHTER)
									{
										color = "9C3D36";
									}
									else
									{
										color = "FFFFFF";
									}
								}
							}

							if (playerData[playerid][playerWantedLevel] >= 1)
							{
								// Yellow Wanted Level
								color = "FFEC41";
							}

							if(playerData[playerid][playerWantedLevel] >= 6)
							{
								// Orange Wanted Level
								color = "DF802D";
							}

							if(playerData[playerid][playerWantedLevel] >= 25)
							{
								// Red Wanted Level
							    color = "D92C3C";
							}
						}

						case 1: // Police
						{
							if (playerData[playerid][vipColour])
							{
								color = "58D3F7";
							}
							else
							{
								color = "3E7EFF";
							}
						}
						case 2: // FBI
						{
							if (playerData[playerid][vipColour])
							{
								color = "58D3F7";
							}
							else
							{
								color = "8F48F5";
							}
						}
						case 3: // CIA
						{
							if (playerData[playerid][vipColour])
							{
								color = "58D3F7";
							}
							else
							{
								color = "2F205B";
							}
						}
						case 4: // Army
						{
							if (playerData[playerid][vipColour])
							{
								color = "58D3F7";
							}
							else
							{
								color = "1C3EFF";
							}
						}
						case 7: // Secret Service
						{
							if (playerData[playerid][vipColour])
							{
								color = "58D3F7";
							}
							else
							{
								color = "2F205B";
							}
						}
					}

					if (playerData[playerid][playerAdminDuty]) // Admin On Duty
					{
					    color = "00e700";
					}

					if (playerData[playerid][useAdminName])
					{
					    format(chat, sizeof(chat),"{%s}%s(%i): {FFFFFF}%s", color, playerData[playerid][tempAdminName], playerid, text);
					}
					else
					{
						format(chat, sizeof(chat),"{%s}%s(%i): {FFFFFF}%s", color, playerData[playerid][playerNamee], playerid, text);
					}

					SendClientMessageToAll(COLOR_WHITE, chat);

					playerData[playerid][messageCount]++;
					KillTimer(playerData[playerid][spamTimer]);
					playerData[playerid][spamTimer] = SetTimerEx("StopSpam", 3000, false, "i", playerid);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_WHITE, "{FFDC2E}[SPAM] {FFFFFF}Please wait a moment before sending another message.");
				}
		    }
		}
	}
	return 0;
}

stock adminchat(color, const msg[])
{
    for (new i=0; i<MAX_PLAYERS; i++)
    {
        if (playerData[i][playerLevel] >= 1)
	    {
	        SendClientMessage(i, color, msg);
	    }
    }
}

stock helperchat(color, const msg[])
{
    for (new i=0; i<MAX_PLAYERS; i++)
    {
        if (playerData[i][playerHelper] == 1)
	    {
	        SendClientMessage(i, color, msg);
	    }
    }
}

stock policechat(color, const msg[])
{
    for (new i=0; i<MAX_PLAYERS; i++)
    {
        if (playerData[i][playerClass] == CLASS_POLICE  || playerData[i][playerClass] == CLASS_ARMY || playerData[i][playerClass] == CLASS_CIA || playerData[i][playerClass] == CLASS_FBI)
	    {
	        SendClientMessage(i, color, msg);
	    }
    }
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
    if(playerData[playerid][canUseCommands] || playerData[playerid][playerLevel] >= 1)
    {
		if(playerData[playerid][hasSpawned] || playerData[playerid][playerLevel] >= 1)
		{
		    playerData[playerid][canUseCommands] = false;
		    playerData[playerid][commandTimer] = SetTimerEx("command", 2000, false, "i", playerid);

			new loggingString[256];
			format(loggingString, sizeof(loggingString), "%s used command: %s", playerData[playerid][playerNamee], cmdtext);
			writeInLog("commandLog.html", loggingString);

		    return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You cannot use commands while you're not spawned.");
	        return 0;
		}
	}
	else
	{
 		SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}Please wait before using another command.");
 		return 0;
	}
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success){
    if (!success) return SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}Unknown command. Type {FFDC2E}/cmds {FFFFFF}for a list of commands or {FFDC2E}/help {FFFFFF}for guides.");
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    ac_OnPlayerEnterVehicle(playerid, vehicleid, ispassenger);

	if(playerData[playerid][playerPreviousVehicles][0] && playerData[playerid][playerPreviousVehicles][1] && playerData[playerid][playerPreviousVehicles][2])
	{
		new totalTime =

		(playerData[playerid][playerPreviousVehicles][2] - playerData[playerid][playerPreviousVehicles][1]) +
		(playerData[playerid][playerPreviousVehicles][1] - playerData[playerid][playerPreviousVehicles][0]) +
		(playerData[playerid][playerPreviousVehicles][0] - GetTickCount());

		if(totalTime < 2000)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && playerData[i][playerLevel] >= 1)
				{
					new message[200];
					format(message, sizeof(message), "{DF0101}[CHEAT REPORT] {FFFFFF}%s(%i) is suspected of car warping.", playerData[playerid][playerNamee], playerid);
					SendClientMessage(i, COLOR_WHITE, message);
				}
			}

			KickWithMessage(playerid, "You have been kicked due to car warping.");
		}
	}

	if (playerData[playerid][truckingStatus] > 0)
	{
	    if(GetVehicleModel(vehicleid) == 515 || GetVehicleModel(vehicleid) == 414)
	    {
			// Player re-entered truck
            KillTimer(playerData[playerid][truckExitTimer]);

			PlayerTextDrawSetString(playerid, playerData[playerid][playerTruckingWaitTD], " ");
			PlayerTextDrawSetString(playerid, playerData[playerid][playerTruckingTD], " ");
			playerData[playerid][truckCounter] = 10;
		}
	}

	if(playerData[playerid][playerPreviousVehicles][1])
	{
		playerData[playerid][playerPreviousVehicles][1] = playerData[playerid][playerPreviousVehicles][2];
	}

	if(playerData[playerid][playerPreviousVehicles][0])
	{
		playerData[playerid][playerPreviousVehicles][0] = playerData[playerid][playerPreviousVehicles][1];
	}

	playerData[playerid][playerPreviousVehicles][0] = GetTickCount();
	playerData[playerid][playerLastVehicleID] = vehicleid;

	//enterVehicle(playerid, playerData[playerid][actualID], vehicleid);

    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(playerData[playerid][iscourier])
	{
		// Cancel the job
		SendClientMessage(playerid, COLOR_WHITE, "{FFDC2E}[COURIER] {FFFFFF}You left your vehicle, mission cancelled.");
		playerData[playerid][iscourier] = false;
		playerData[playerid][playerCourierLevel] = 0;
		RemovePlayerMapIcon(playerid, 90);
		DestroyDynamicRaceCP(playerData[playerid][playerLastCourierCP]);
		TextDrawHideForPlayer(playerid, TDCourier2);
		TextDrawHideForPlayer(playerid, TDCourier);
		KillTimer(playerData[playerid][courierTimer]);
		TogglePlayerControllable(playerid, 1);
		DisablePlayerCheckpoint(playerid);
		KillTimer(playerData[playerid][courierDistance]);
		PlayerTextDrawSetString(playerid, playerData[playerid][playerCourierDistanceTD], " ");
	}
	else if (playerData[playerid][forkliftStatus] > 0)
	{
	    return cmd_cancelforklift(playerid, "");
	}
	else if (playerData[playerid][busStatus] > 0)
	{
	    return cmd_cancelroute(playerid, "");
	}

	new Float: oldPos[4];

	GetVehiclePos(vehicleid, oldPos[0], oldPos[1], oldPos[2]);
	GetVehicleZAngle(vehicleid, oldPos[3]);

    vWarped[vehicleid][theVehicle] = vehicleid;
	vWarped[vehicleid][vehiclePositionX] = oldPos[0];
	vWarped[vehicleid][vehiclePositionY] = oldPos[1];
	vWarped[vehicleid][vehiclePositionZ] = oldPos[2];
	vWarped[vehicleid][vehiclePositionA] = oldPos[3];
	vWarped[vehicleid][wasOccupied] = true;

	return 1;
}

public OnPlayerCleoDetected( playerid, cleoid )
{
    switch( cleoid )
    {
        case CLEO_CARSWING:
        {
            ac_CarSwing(playerid);
        }
        case CLEO_CAR_PARTICLE_SPAM:
        {
            ac_CarSpam(playerid);
        }
    }
    return 1;
}

new p_CarWarpTime[MAX_PLAYERS];
new p_CarWarpVehicleID[MAX_PLAYERS];

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    ac_OnPlayerStateChange(playerid, newstate, oldstate);

    checkTheft(playerid, newstate, oldstate);

    /*if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    new i = Player[playerid][PlayerGang],
		z;
	    if(i != -1)
	    {
	        z = Gang[i][CurrentZone];
	        if(z != -1 && Area_GetPlayerAreas(playerid, 0) == GangZone[z][ZoneArea])
	        {
	            SendClientMessage(playerid, -1, "Sorry, entering vehicle whilst capturing gang zone is not allowed!");
	            RemovePlayerFromVehicle(playerid);
	        }
	    }
	}*/

    if(newstate == PLAYER_STATE_DRIVER)
    {
        SetPlayerArmedWeapon(playerid, 0);
        if( GetPlayerVehicleID(playerid) != p_CarWarpVehicleID[playerid])
        {
            if( p_CarWarpTime[playerid] > gettime())
            {
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) && playerData[i][playerLevel] >= 1)
					{
					    new messageContent[128];
						format(messageContent, sizeof(messageContent), "{FFDC2E}[CHEAT ALERT] {FFFFFF}%s(%i) is suspected of car warping", playerData[i][playerNamee], i);
						SendClientMessage(i, COLOR_WHITE, messageContent);
					}
				}
            }

            p_CarWarpTime[playerid] = gettime() + 1;
            p_CarWarpVehicleID[playerid] = GetPlayerVehicleID(playerid);
        }

        new vehicleid = GetPlayerVehicleID(playerid);
		enterVehicle(playerid, playerData[playerid][actualID], vehicleid);
    }

    if (newstate == PLAYER_STATE_ONFOOT)
    {
		if(playerData[playerid][iscourier])
		{
			// Cancel the job
			SendClientMessage(playerid, COLOR_WHITE, "{FFDC2E}[COURIER] {FFFFFF}You left your vehicle, mission cancelled.");
			playerData[playerid][iscourier] = false;
			playerData[playerid][playerCourierLevel] = 0;
			RemovePlayerMapIcon(playerid, 90);
			DestroyDynamicRaceCP(playerData[playerid][playerLastCourierCP]);
			TextDrawHideForPlayer(playerid, TDCourier2);
			TextDrawHideForPlayer(playerid, TDCourier);
			KillTimer(playerData[playerid][courierTimer]);
			TogglePlayerControllable(playerid, 1);
			DisablePlayerCheckpoint(playerid);
			KillTimer(playerData[playerid][courierDistance]);
			PlayerTextDrawSetString(playerid, playerData[playerid][playerCourierDistanceTD], " ");
		}
		else if (playerData[playerid][truckingStatus] > 0)
		{
			// Player has 10 seconds to re-enter the truck
			KillTimer(playerData[playerid][truckExitTimer]);
			playerData[playerid][truckExitTimer] = SetTimerEx("exitTruck", 1000, true, "i", playerid);
			playerData[playerid][truckCounter] = 10;
		}
		else if (playerData[playerid][forkliftStatus] > 0)
		{
		    return cmd_cancelforklift(playerid, "");
		}
		else if (playerData[playerid][busStatus] > 0)
		{
		    return cmd_cancelroute(playerid, "");
		}
		else if (playerData[playerid][sweepStatus] > 0)
		{
		    return cmd_cancelsweep(playerid, "");
		}
		else if (playerData[playerid][medicStatus] > 0)
		{
		    return cmd_cancelmedic(playerid, "");
		}
    }

	if(newstate == PLAYER_STATE_PASSENGER)
	{
		SetPlayerArmedWeapon(playerid, 0);
	}

    if(newstate == PLAYER_STATE_DRIVER)
    {
        // New Medic
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
		{
		    if(playerData[playerid][playerClass] != CLASS_MEDIC)
		    {
			    if(playerData[playerid][playerLevel] != 6)
			    {
		            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}This job can only be used by medics.");
		            RemovePlayerFromVehicle(playerid);
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "{58D3F7}[MEDIC] {FFFFFF}To begin a mission, type {E6BD1A}/medic {FFFFFF}or press {E6BD1A}2");
		        GameTextForPlayer(playerid, "Type /medic or press 2 to start a mission.", 5000, 5);
		    }
		}
        // New Medic
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
		{
		    if(playerData[playerid][playerClass] != CLASS_FIREFIGHTER)
		    {
			    if(playerData[playerid][playerLevel] != 6)
			    {
		            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}This job can only be used by firefighter.");
		            RemovePlayerFromVehicle(playerid);
				}
		    }
		    else
		    {
		    	if(!playerData[playerid][fireOnMission])
		    	{
			        SendClientMessage(playerid, COLOR_WHITE, "{58D3F7}[FIREFIGHTER] {FFFFFF}To begin a mission, type {E6BD1A}/fire {FFFFFF}or press {E6BD1A}2");
			        GameTextForPlayer(playerid, "Type /fire or press 2 to start a mission.", 5000, 5);
			    }
		    }
		}

		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 431)
		{
		    if(playerData[playerid][playerClass] != CLASS_CIVILIAN)
		    {
			    if(playerData[playerid][playerLevel] != 6)
			    {
		            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}This job can only be used by civilians.");
		            RemovePlayerFromVehicle(playerid);
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "{58D3F7}[BUS DRIVER] {FFFFFF}To begin a bus route, type {E6BD1A}/startroute {FFFFFF}or press {E6BD1A}2");
		        GameTextForPlayer(playerid, "Type /startroute or press 2 to start a mission.", 5000, 5);
		    }
		}

		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
		{
		    if(playerData[playerid][playerClass] != CLASS_CIVILIAN)
		    {
			    if(playerData[playerid][playerLevel] != 6)
			    {
		            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}This job can only be used by civilians.");
		            RemovePlayerFromVehicle(playerid);
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "{58D3F7}[SWEEPER] {FFFFFF}To begin a sweeper mission, type {E6BD1A}/sweep {FFFFFF}or press {E6BD1A}2");
		        GameTextForPlayer(playerid, "Type /sweep or press 2 to start a mission.", 5000, 5);
		    }
		}

    	for(new i; i < MAX_CLASS_CAR; i++)
    	{
			new checkCar = GetPlayerVehicleID(playerid);

	 		if(checkCar == classCarIndex[i])
	  		{
	  		    if(classCars[i][classID] == CLASS_CIVILIAN)
	  		    {
					if(GetVehicleModel(checkCar) == 423)
					{
					    if(playerData[playerid][playerJob] != JOB_DRUGDEALER)
					    {
						    if(playerData[playerid][playerLevel] != 6)
						    {
					            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}This vehicle can only be used by drug dealers.");
					            RemovePlayerFromVehicle(playerid);
							}
					    }
					}

					if(GetVehicleModel(checkCar) == 515 || GetVehicleModel(checkCar) == 414)
					{
					    if(playerData[playerid][playerClass] != CLASS_CIVILIAN)
					    {
						    if(playerData[playerid][playerLevel] != 6)
						    {
					            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}This job can only be used by civilians.");
					            RemovePlayerFromVehicle(playerid);
							}
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "{58D3F7}[TRUCKING] {FFFFFF}To begin trucking, attach a trailer and type {E6BD1A}/trucking {FFFFFF}or press {E6BD1A}2");
					        GameTextForPlayer(playerid, "Type /trucking or press 2 to start a mission.", 5000, 5);
					    }
					}

					if(GetVehicleModel(checkCar) == 530)
					{
					    if(playerData[playerid][playerClass] != CLASS_CIVILIAN)
					    {
				            SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}This job can only be used by civilians.");
				            RemovePlayerFromVehicle(playerid);
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_WHITE, "{58D3F7}[DOCK WORKER] {FFFFFF}To begin this job, type {E6BD1A}/forklift {FFFFFF}or press {E6BD1A}2");
					        GameTextForPlayer(playerid, "Type /forklift or press 2 to start a mission.", 5000, 5);
					    }
					}
	  		    }
	  		    else if(classCars[i][classID] == CLASS_POLICE)
	  		    {
	   	    		if(playerData[playerid][playerClass] == CLASS_CIVILIAN)
	        		{
			  		    if(playerData[playerid][playerLastLEO] != checkCar)
			  		    {
			  		        if (!playerData[playerid][mask])
			  		        {
			        		    SendClientMessage(playerid, COLOR_WHITE, "{E6BD1A}[CRIME] {FFFFFF}You stole a LEO vehicle and received {E6BD1A}3 {FFFFFF}wanted!");
			        		    playerData[playerid][playerLastLEO] = checkCar;
			        		    givePlayerWanted(playerid, 3);
							}
						}
					}
				}
				else if(classCars[i][classID] == CLASS_ARMY)
				{
				    if(playerData[playerid][playerClass] != CLASS_ARMY)
				    {
				        if(playerData[playerid][playerClass] == CLASS_CIVILIAN)
				        {
				  		    if(playerData[playerid][playerLastLEO] != checkCar)
				  		    {
				  		        if (!playerData[playerid][mask])
				  		        {
						            SendClientMessage(playerid, COLOR_WHITE, "{E6BD1A}[CRIME] {FFFFFF}You tried to steal an army vehicle and received {E6BD1A}3 {FFFFFF}wanted!");
						            playerData[playerid][playerLastLEO] = checkCar;
						            givePlayerWanted(playerid, 3);
								}
							}
				        }

				        RemovePlayerFromVehicle(playerid);

				    }
				}
				else if(classCars[i][classID] == CLASS_FBI)
				{
			        if(playerData[playerid][playerClass] == CLASS_CIVILIAN)
			        {
			  		    if(playerData[playerid][playerLastLEO] != checkCar)
			  		    {
			  		        if (!playerData[playerid][mask])
			  		        {
					            SendClientMessage(playerid, COLOR_WHITE, "{E6BD1A}[CRIME] {FFFFFF}You stole a LEO vehicle and received {E6BD1A}3 {FFFFFF}wanted!");
								playerData[playerid][playerLastLEO] = checkCar;
					            givePlayerWanted(playerid, 3);
					            playerData[playerid][playerLastLEO] = checkCar;
							}
						}
			        }
				}
				else if(classCars[i][classID] == CLASS_SECRETSERVICE)
				{
				    if(playerData[playerid][playerClass] != CLASS_SECRETSERVICE)
				    {
				        if(playerData[playerid][playerClass] == CLASS_CIVILIAN)
				        {
				  		    if(playerData[playerid][playerLastLEO] != checkCar)
				  		    {
				  		        if (!playerData[playerid][mask])
				  		        {
						            SendClientMessage(playerid, COLOR_WHITE, "{E6BD1A}[CRIME] {FFFFFF}You tried to steal a secret service vehicle and received {E6BD1A}3 {FFFFFF}wanted!");
						            playerData[playerid][playerLastLEO] = checkCar;
						            givePlayerWanted(playerid, 3);
								}
							}
				        }

				        RemovePlayerFromVehicle(playerid);

				    }
				}
			}
		}

		return 1;
	}

    return 1;
}

stock strmatch(const String1[], const String2[])
{
    if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
    {
        return true;
    }
    else
    {
        return false;
    }
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    if (serverInfo[moneybagid] != -1)
    {
		new MoneybagID = serverInfo[moneybagid];
		if(pickupid == moneyBagInfo[MoneybagID][bagID])
		{
		    for(new p; p < MAX_PLAYERS; p++)
			{
				new pName[24];
				GetPlayerName(p, pName, sizeof(pName));

				if(!strcmp(pName, playerData[playerid][playerNamee]))
				{
					new moneybagmsg[200];
					format(moneybagmsg, sizeof(moneybagmsg), "{f5ff00}[MoneyBag] {fc0202}OH Yeah! You found the Mafia's lost MoneyBag and got {FFDC2E}$%s{fc0202} inside it.", FormatNumber(moneyBagInfo[MoneybagID][bagValue]));
					SendClientMessage(p, COLOR_WHITE, moneybagmsg);
				}
				else
				{
					new moneybagmsg[200];
					format(moneybagmsg, sizeof(moneybagmsg), "{f5ff00}[MoneyBag] {fc0202}%s(%i) has found the Mafia's lost MoneyBag and got {FFDC2E}$%s{fc0202} inside it!", playerData[playerid][playerNamee], playerid, FormatNumber(moneyBagInfo[MoneybagID][bagValue]));
					SendClientMessage(p, COLOR_WHITE, moneybagmsg);
				}
			}

			playerGiveMoney(playerid, moneyBagInfo[MoneybagID][bagValue]);
			playerGiveXP(playerid, 20);

			DestroyPickup(moneyBagInfo[MoneybagID][bagID]);
			DestroyDynamic3DTextLabel(moneyBagInfo[MoneybagID][bagLabel]);
			TextDrawHideForAll(Moneybag);//right?
			TextDrawHideForAll(Moneybag1);
			serverInfo[moneybagid] = -1;
			playerData[playerid][moneyBags] = playerData[playerid][moneyBags] + 1;

			if(playerData[playerid][moneyBags] == 1)
			{
				disableAchieve(playerid);
				PlayerTextDrawShow(playerid, playerData[playerid][Achieve1]);
				PlayerTextDrawShow(playerid, playerData[playerid][Achieve2]);
				PlayerTextDrawShow(playerid, playerData[playerid][Achieve3]);
				PlayerTextDrawShow(playerid, playerData[playerid][Achieve4]);

				PlayerTextDrawSetString(playerid, playerData[playerid][Achieve3], "Easy Money");
				PlayerTextDrawSetString(playerid, playerData[playerid][Achieve4], "You found and claimed your first Moneybag.");
				PlayerPlaySound(playerid, 1185 ,0.0, 0.0, 0.0);
				TextDrawHideForAll(Moneybag);//right?
				TextDrawHideForAll(Moneybag1);

				playerData[playerid][achieveTimer] = SetTimerEx("disableAchieve", 8000, false, "i", playerid);
			}
		}
	}

    if(pickupid == pickup_chute)
    {
        GivePlayerWeaponEx(playerid, 46, 1);
    }
    else if(pickupid == pickup_ss)
    {
        GivePlayerWeaponEx(playerid, 46, 1);
    }
    else if(pickupid == pickup_vhealth || pickupid == pickup_vhealth2 || pickupid == pickup_vhealth3)
    {
        // If VIP
		if (playerData[playerid][playerVIPLevel] >= 1)
		{
			SetPlayerHealth(playerid, 100);
		}
	}
	else if (pickupid == pickup_varmour || pickupid == pickup_varmour2)
	{
	    // If crim/top vip
        if (playerData[playerid][playerVIPLevel] == 1)
		{
		    SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You must be at-least Silver VIP to refill your armour.");
		}

        if (playerData[playerid][playerVIPLevel] == 2)
		{
		    SetPlayerArmour(playerid, 50);
		}

        if (playerData[playerid][playerVIPLevel] == 3)
		{
		    SetPlayerArmour(playerid, 99);
		}

		if (playerData[playerid][playerVIPLevel] == 4)
		{
		    SetPlayerArmour(playerid, 99);
		}
	}

	return 1;
}



public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(newinteriorid == 90)
		SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[SUPA SAVE] {FFFFFF}Use /shop to buy items from Supa Save!");
	if(newinteriorid == 207)
		SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}[THE SUPA] {FFFFFF}Use /shop to buy items from The Supa!");
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if((newkeys & KEY_WALK) && !(oldkeys & KEY_WALK))
	{
	    beginRobbery(playerid);
	}

    if((newkeys & KEY_JUMP) && !(oldkeys & KEY_JUMP) || (newkeys & KEY_SPRINT) && !(oldkeys & KEY_SPRINT))
	{
	    if (playerData[playerid][playerUsingAnim])
	    {
			ClearAnimations(playerid);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			playerData[playerid][playerUsingAnim] = false;
 	    }
	}

    if((newkeys & KEY_WALK) && !(oldkeys & KEY_WALK))
	{
	    new world = GetPlayerVirtualWorld(playerid);

	    if(world < 1)
	    {
			intoHouse(playerid);
			//intoBus(playerid);
 		}
	}

    if((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
    {
        checkWeapons(playerid);
    }

    if((newkeys & KEY_WALK) && !(oldkeys & KEY_WALK))
	{
	   	leaveHouse(playerid, playerData[playerid][playerInsideHouse]);
	   	//leaveBus(playerid, playerData[playerid][playerInsideBusiness]);
	}

	if((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH))
	{
		cancelRobbery(playerid);
	}

	if((newkeys & KEY_YES) && !(oldkeys & KEY_YES))
	{
		if(playerData[playerid][playerClass] == CLASS_CIVILIAN)
		{
		    if(playerData[playerid][playerJob] == JOB_TERRORIST)
		    {
		        detonateExplosives(playerid);
		  	}
		}
	}
	
	/*if ( HOLDING( KEY_FIRE ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
    {
        if(playerData[playerid][onRace1])
		{
          	AddVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
        }
    }

    if (  RELEASED( KEY_FIRE ) && GetPlayerState( playerid ) == PLAYER_STATE_DRIVER )
    {
        if(playerData[playerid][onRace1])
		{
          	RemoveVehicleComponent( GetPlayerVehicleID( playerid ), 1010 );
        }
    }*/

	if((newkeys & KEY_SUBMISSION) && !(oldkeys & KEY_SUBMISSION))
	{
		if(playerData[playerid][playerClass] == CLASS_ARMY || playerData[playerid][playerClass] == CLASS_SECRETSERVICE)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehid = GetVehicleModel(GetPlayerVehicleID(playerid)), Float:xx, Float:xy, Float:xz;
				if((vehid == 487 || vehid == 447 || vehid == 469 || vehid == 487  || vehid == 488 || vehid == 497 || vehid == 548) && (GetPlayerVehicleSeat(playerid) != 0))
				{
					GetVehiclePos(GetPlayerVehicleID(playerid), xx, xy, xz);
					if(xz > 500.0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}It's too high to start rappeling.");
						return 1;
					}
					if(GetVehicleSpeed(GetPlayerVehicleID(playerid)) < 50)
					{
						RemovePlayerFromVehicle(playerid);
						Rappel[playerid] = 1;
						SetTimerEx("DeActivateRappel", 5000, 0, "i", playerid);
					}
					else
						SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You can't start rappeling, this heli is too fast.");
				}
			}
		}
		if(playerData[playerid][playerClass] == CLASS_CIVILIAN)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
			    // Trucking
		 		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 414)
				{
                    return cmd_trucking(playerid, "");
				}

			    // Bus Driver
		 		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 431)
				{
                    return cmd_startroute(playerid, "");
				}

		 		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
				{
                    return cmd_sweep(playerid, "");
				}

				// Forklift
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 530)
				{
                    return cmd_forklift(playerid, "");
				}
			}
		}

		if(playerData[playerid][playerClass] == CLASS_MEDIC)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				// Medic
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
				{
	                return cmd_medic(playerid, "");
				}
			}
		}

		if(playerData[playerid][playerClass] == CLASS_FIREFIGHTER)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				// Medic
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
				{
	                return cmd_fire(playerid, "");
				}
			}
		}
	}

    if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);

    cbugKeys(playerid, newkeys, oldkeys);

	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!strcmp(ip, "83.183.17.204", true) || !strcmp(ip, "82.30.157.229") || !strcmp(ip, "82.3.86.182") || !strcmp(ip, "83.226.34.213", true) || !strcmp(ip, "127.0.0.1", true))
	{
		if(!success)
	    {
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && playerData[i][playerLevel] >= 5)
				{
				    new messageContent[128];
					format(messageContent, sizeof(messageContent), "{FFDC2E}[RCON ALERT] {FFFFFF}Failed RCON login attempt by {FFDC2E}%s.", ip);
					SendClientMessage(i, COLOR_WHITE, messageContent);

					return 0;
				}
			}
		}

		return 1;
	}
	else
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && playerData[i][playerLevel] >= 5)
			{
			    new messageContent[128];
				format(messageContent, sizeof(messageContent), "{FFDC2E}[RCON ALERT] {FFFFFF}Unknown IP address {FFDC2E}%s {FFFFFF}attempted to login to RCON.", ip);
				SendClientMessage(i, COLOR_WHITE, messageContent);
			}
		}

		return 0;
	}
}

/*PRIVATE: GetXYZInFrontOfPlayer(playerid, &Float: x, &Float: y, &Float: z, Float: distance)
{
	new Float: a;

	GetPlayerPos (playerid, x, y, z);
	GetPlayerFacingAngle (playerid, a);

	x += (distance * floatsin (-a, degrees));
	y += (distance * floatcos (-a, degrees));
}*/

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	//ac_CarTeleport(playerid, vehicleid);

    /*if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetVehicleDistanceFromPoint (vehicleid, vWarped[vehicleid][vehiclePositionX], vWarped[vehicleid][vehiclePositionY], vWarped[vehicleid][vehiclePositionZ]) > 20.0)
    {
        new Float: x, Float: y, Float: z;

        GetXYZInFrontOfPlayer(playerid, x, y, z, 5.0);
        if (GetVehicleDistanceFromPoint (vehicleid, x, y, z) < 10.0)
        {
            SetVehicleToRespawn(vehicleid);
        }
    }*/

	return 1;
}

public OnPlayerUpdate(playerid)
{
    if(ac_OnPlayerUpdate(playerid) == 0) return 0;
    //gangUpdate(playerid);
    if(playerData[playerid][playerClass] == CLASS_FIREFIGHTER)
    {
    	f_OnPlayerUpdate(playerid);
    }
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i < sizeof(Spikes); i++)
		{
			if(Spikes[i][spCreated] == 1)
            {
				if(IsPlayerInRangeOfPoint(playerid, 2.0, Spikes[i][spX], Spikes[i][spY], Spikes[i][spZ]))
				{
					new panels, doors, lights, tires, idVeh;
					idVeh = GetPlayerVehicleID(playerid);
					GetVehicleDamageStatus(idVeh, panels, doors, lights, tires);
					UpdateVehicleDamageStatus(idVeh, panels, doors, lights, 15);
				}
			}
		}
	}
	
	if(playerData[playerid][playerAdminDuty])
	{
          SetPlayerArmedWeapon(playerid, 0);
 	}
	
    new anim = GetPlayerAnimationIndex(playerid);
    //Check if the animation applied is CAR_getin_LHS/RHS
    if(anim == 1026 || anim == 1027)
    {
        g_EnterAnim{playerid} = true;
    }

 	if(playerData[playerid][isInFallout])// || playerData[playerid][onDerby])
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		if(z < 1.0 && playerData[playerid][isInFallout])
		{
			SetCameraBehindPlayer(playerid);
			SpawnPlayer(playerid);
		}
		/*if(z < 0.0 && playerData[playerid][onDerby])
		{
   			SetCameraBehindPlayer(playerid);
			SpawnPlayer(playerid);
		}*/
	}
	updateCbug(playerid);
	if(Rappel[playerid] == 0) return 1;
    if(GetPlayerAnimationIndex(playerid) && (IsRappelling[playerid] == 0))
    {
        new animlib[32];
        new animname[32];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        if((!strcmp(animlib, "PED", true, 3)) && (!strcmp(animname, "FALL_fall", true, 9)))
        {
           RappelPlayer(playerid);
           IsRappelling[playerid] = 1;
           GetPlayerHealth(playerid, PlayerHealth[playerid]);
           SetPlayerHealth(playerid, 999999.0);
           LandingChecker[playerid] = SetTimerEx("FallingChecker",500,1,"i",playerid);
        }
    }
    return 1;
}


public OnPlayerEnterCheckpoint(playerid)
{
    if(playerData[playerid][playerCourierLevel] == 1 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 593)
	{
        // Assign a random pick-up location
		TogglePlayerControllable(playerid, 0);
        TextDrawShowForPlayer(playerid, TDCourier);

        playerData[playerid][courierTimer] = SetTimerEx("CourierWaitLoad", 3000, false, "i", playerid);

        new rand = random(4);

        if (rand == 0)
        {
            // Drop-off location 1
            SetPlayerCheckpoint(playerid, -1159.2885, -1115.1556, 128.2656, 10);
		}
		else if(rand == 1)
		{
		    // Drop-off location 2
		    SetPlayerCheckpoint(playerid, 1613.6582, -2629.8169, 13.5469, 10);
		}
		else if(rand == 2)
		{
		    // Drop-off location 3
		    SetPlayerCheckpoint(playerid, -1378.5120, -1466.8733, 101.8131, 10);
		}
		else if(rand == 3)
		{
		    // Drop-off location 4
		    SetPlayerCheckpoint(playerid, -1108.9940, -1653.5695, 76.3672, 10);
		}
		else if(rand == 4)
		{
		    // Drop-off location 5
		    SetPlayerCheckpoint(playerid, -368.9295, -1048.7743, 59.3404, 10);
		}

		playerData[playerid][playerCourierLevel] = 2;

	}
	else if(playerData[playerid][playerCourierLevel] == 2 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 593)
	{
		// Unloading
		TogglePlayerControllable(playerid, 0);
        TextDrawShowForPlayer(playerid, TDCourier2);
		playerData[playerid][courierTimer] = SetTimerEx("CourierWaitUnload", 3000, false, "i", playerid);
	}
	return 1;
}

public OnPlayerEnterDynamicRaceCP(playerid, checkpointid)
{
	if (playerData[playerid][truckingStatus]) // Player is currently trucking
	{
		//
		// Check mission type
		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 515 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 414)
		{
		    if(GetVehicleTrailer(GetPlayerVehicleID(playerid)) || GetVehicleModel(GetPlayerVehicleID(playerid)) == 414)
			{
				new tickCountResult = GetTickCount(), reducedValue;
				reducedValue = tickCountResult - playerData[playerid][playerMissionCPTime];

                if(reducedValue > 20000)
                {
					//
					// Check mission status
					if (playerData[playerid][truckingStatus] == 1)
					{
						//
						// Pickup - Wait 5 seconds for pick-up
						TogglePlayerControllable(playerid, 0);

						// Gametext
	                    PlayerTextDrawSetString(playerid, playerData[playerid][playerTruckingTD], "LOADING CARGO");
						PlayerTextDrawSetString(playerid, playerData[playerid][playerTruckingWaitTD], "please wait");

						//
						// Initiate 5 second wait timer
						playerData[playerid][truckLoadTimer] = SetTimerEx("loadTrailer", 3000, false, "i", playerid);
					}
					else
					{
						//
						// Deliver
						TogglePlayerControllable(playerid, 0);

						// Gametext
	                    PlayerTextDrawSetString(playerid, playerData[playerid][playerTruckingTD], "UNLOADING CARGO");
						PlayerTextDrawSetString(playerid, playerData[playerid][playerTruckingWaitTD], "please wait");

						//
						// Initiate 5 second wait timer
						playerData[playerid][truckLoadTimer] = SetTimerEx("loadTrailer", 3000, false, "i", playerid);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You must be towing a trailer to pickup/dropoff cargo.");
			}
		}
	}
	
	
	if(playerData[playerid][onRace1])
	{
	    if(checkpointid == FINISH)
		{
			if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 411)
			{
				new raceComplete[380];
				format(raceComplete, sizeof(raceComplete), "{FF00FF}[RACE WINNER] {FFFFFF}%s(%i) has won the race event", playerData[playerid][playerNamee], playerid);
				SendClientMessageToAll(COLOR_WHITE, raceComplete);
				
	   			DestroyDynamicRaceCP(FINISH);
	      	}
   		}
	}

	if (playerData[playerid][medicStatus] > 0)
	{
		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 416)
		{
			medicProgress(playerid);
		}
	}

	if(playerData[playerid][busStatus] > 0)
	{
		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 431)
		{
			new tickCountResult = GetTickCount(), reducedValue;
			reducedValue = tickCountResult - playerData[playerid][playerMissionCPTime];

            if(reducedValue > 8000)
            {
				nextStop(playerid);
			}
		}
	}

	if(playerData[playerid][sweepStatus] > 0)
	{
		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 574)
		{
			new tickCountResult = GetTickCount(), reducedValue;
			reducedValue = tickCountResult - playerData[playerid][playerMissionCPTime];

            if(reducedValue > 8000)
            {
				nextSweep(playerid);
			}
		}
	}

	if(playerData[playerid][forkliftStatus] > 0)
	{
		if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 530)
		{
			new tickCountResult = GetTickCount(), reducedValue;
			reducedValue = tickCountResult - playerData[playerid][playerMissionCPTime];

            if(reducedValue > 8000)
            {
				//
				// Check mission status
				if (playerData[playerid][forkliftStatus] == 1)
				{
					// Pickup
					forklift_pickup(playerid);

					playerData[playerid][playerMissionCPTime] = GetTickCount();
				}
				else
				{
					// Dropoff
					forklift_dropoff(playerid);

					playerData[playerid][playerMissionCPTime] = GetTickCount();
				}
			}
		}
	}
	else
	{
		if(playerData[playerid][playerCourierLevel] == 3 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 482)
		{
		    // Load parcels onto van
			TogglePlayerControllable(playerid, 0);
	        TextDrawShowForPlayer(playerid, TDCourier);
			playerData[playerid][courierTimer] = SetTimerEx("CourierWaitVanLoad", 3000, false, "i", playerid);
		}
		else if(playerData[playerid][playerCourierLevel] == 4 && GetVehicleModel(GetPlayerVehicleID(playerid)) == 482)
		{
		    // Unload parcels from van
		    if(playerData[playerid][playerCourierItems] > 1)
		    {
	 			TogglePlayerControllable(playerid, 0);
	            TextDrawShowForPlayer(playerid, TDCourier2);
				playerData[playerid][courierTimer] = SetTimerEx("CourierWaitVanUnload", 3000, false, "i", playerid);
			}
			else
			{
	 			TogglePlayerControllable(playerid, 0);
	            TextDrawShowForPlayer(playerid, TDCourier2);
				playerData[playerid][courierTimer] = SetTimerEx("CourierWaitVanComplete", 3000, false, "i", playerid);
			}
		}
 	}

	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(IsPlayerAdmin(playerid))
    {
        SetPlayerPosFindZ(playerid, fX, fY, fZ + 2);
        return 1;
    }

    return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
    if(issuerid != INVALID_PLAYER_ID && playerData[issuerid][isInDM])
    {
        return 0;
	}
	
	if(issuerid != INVALID_PLAYER_ID && playerData[issuerid][isInCVR])
    {
        return 0;
	}
	if(issuerid != INVALID_PLAYER_ID && playerData[issuerid][isinFREEFORALL])
    {
        return 0;
	}

    if(issuerid != INVALID_PLAYER_ID && playerData[issuerid][isInEvent])
    {
        return 0;
	}
	
	if(issuerid != INVALID_PLAYER_ID && playerData[issuerid][isInDuel])
    {
        return 0;
	}

	if (playerData[playerid][isInDM])
	{
 		return 0;
 	}
 	
 	if (playerData[playerid][isInCVR])
	{
 		return 0;
 	}
 	if (playerData[playerid][isinFREEFORALL])
	{
 		return 0;
 	}

 	if (playerData[playerid][isInEvent])
	{
 		return 0;
 	}
 	
 	if (playerData[playerid][isInDuel])
	{
 		return 0;
 	}

    if(issuerid != INVALID_PLAYER_ID)
    {
		if(playerData[issuerid][playerHitmarker])
		{
			new string[128];

			format(string, sizeof(string), "%0.2f damage", amount);
			PlayerTextDrawSetString(issuerid, playerData[issuerid][playerHitmarkerTD], string);
			SetTimerEx("hideHitmarkerTD", 2000, false, "i", issuerid);
			PlayerPlaySound(issuerid, 17802, 0.0, 0.0, 0.0);
		}

		if(playerData[issuerid][playerClass] == CLASS_CIVILIAN || playerData[issuerid][playerClass] == CLASS_FIREFIGHTER || playerData[issuerid][playerClass] == CLASS_MEDIC)
		{
			if(playerData[playerid][playerClass] == CLASS_ARMY || playerData[playerid][playerClass] == CLASS_POLICE || playerData[playerid][playerClass] == CLASS_CIA || playerData[playerid][playerClass] == CLASS_FBI || playerData[playerid][playerClass] == CLASS_SECRETSERVICE)
			{
				if(playerData[issuerid][playerWantedLevel] == 0)
				{
					if(playerData[playerid][playerJailTime] <= 0)
					{
						givePlayerWanted(issuerid, 6);
						sendWantedMessage(issuerid, 6);
						newPlayerColour(issuerid);
					}
				}
			}
		}
		else if(playerData[issuerid][playerClass] == CLASS_POLICE || playerData[issuerid][playerClass] == CLASS_ARMY || playerData[issuerid][playerClass] == CLASS_CIA  || playerData[issuerid][playerClass] == CLASS_FBI || playerData[issuerid][playerClass] == CLASS_SECRETSERVICE)
		{
		    if(playerData[playerid][playerClass] == CLASS_CIVILIAN || playerData[playerid][playerClass] == CLASS_FIREFIGHTER || playerData[playerid][playerClass] == CLASS_MEDIC)
		    {
		        if (playerData[playerid][playerWantedLevel] == 0)
		        {
					new Float:theirHealth;
	            	GetPlayerHealth(playerid, theirHealth);
	            	SetPlayerHealth(playerid, theirHealth - 0);
				}
		    }
		}
		else if (playerData[issuerid][playerAdminDuty])
		{
		    GameTextForPlayer(issuerid, "You're AoD! Do not harm players!", 3000, 4);
		}
	}

    return 1;
}

// System for vip verification
forward check_vip(index, response_code, data[]);
public check_vip(index, response_code, data[])
{
    if(response_code == 200)
    {
        new get_data[20], string[500];
        format(get_data, sizeof(get_data), "%s", data);

		new redeem = strval(get_data);
		switch(redeem)
		{
		    case 1: // Premium Redemption
		    {
			    playerData[index][vipExpires] = gettime() + 2592000;
				playerData[index][playerVIPLevel] = 1;
				savePlayerStats(index);

				format(string, sizeof(string), "%s{98B0CD}Online Code Redemption Service\n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}{58D3F7}Successfully Redeemed! \n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}Your code has been redeemed and your membership is now active.\n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}Type {58D3F7}/viphelp{FFFFFF} to view a list of commands that are\n", string);
				format(string, sizeof(string), "%s{FFFFFF}presently available to you.\n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}Thanks for supporting the server!", string);

				ShowPlayerDialog(index, DIALOG_VIP_ALREADY, DIALOG_STYLE_MSGBOX, "Code Redemption", string, "OK", "");
				SendClientMessage(index, COLOR_WHITE, "{58D3F7}[VIP AWARDED] {FFFFFF}Your VIP purchase has been activated. /viphelp to view a list of VIP content.");
		    }


		    case 101: // Code already redeemed
		    {
				format(string, sizeof(string), "%s{98B0CD}CNRSF Code Redemption Service\n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}{58D3F7}This code has already been redeemed. \n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}This code was already redeemed by a player.\n", string);
				format(string, sizeof(string), "%s{FFFFFF}If you believe this to be an error, please contact a shop admin.\n\n", string);

				format(string, sizeof(string), "%s{58D3F7}http://shop.sfcnr.in", string);

				ShowPlayerDialog(index, DIALOG_VIP_ALREADY, DIALOG_STYLE_MSGBOX, "Code Redemption", string, "OK", "");
		    }

		    case 102: // Code doesn't exist
		    {
				format(string, sizeof(string), "%s{98B0CD}CNRSF Code Redemption Service\n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}{58D3F7}Unable to find the redemption code. \n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}The redemption code you entered is invalid.\n", string);
				format(string, sizeof(string), "%s{FFFFFF}Try entering it again, or contact a shop admin for assistance.\n\n", string);

				format(string, sizeof(string), "%s{58D3F7}http://shop.sfcnr.in", string);

				ShowPlayerDialog(index, DIALOG_VIP_ALREADY, DIALOG_STYLE_MSGBOX, "Code Redemption", string, "OK", "");
		    }
		}
    }
    else // Error whilst attempting to redeem code from store
    {
        SendClientMessage(index, COLOR_WHITE, "HTTP Error - Please try again later.");
    }
}

CMD:freevip(playerid,params[])
{
        if(playerData[playerid][playerVIPLevel] >= 1)
        {
        SendClientMessage(playerid, COLOR_WHITE, "{FF0000}[ERROR] {FFFFFF} You already got your Free V.I.P (/vips)");
        }
           else
        {
        SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You have got Free V.I.P, Enjoy!");
        playerData[playerid][playerVIPLevel] = 1;
        playerData[playerid][vipExpires] = gettime() + 9999999;
        }
        return 1;
}

forward check_code(index, response_code, data[]);
public check_code(index, response_code, data[])
{
    if(response_code == 200)
    {
        new get_data[20], string[500];
        format(get_data, sizeof(get_data), "%s", data);

		new redeem = strval(get_data);
		switch(redeem)
		{
		    case 3: // Easy Stretch
		    {
		        if (playerData[index][playerJailTime] > 20)
		        {
					// Release from jail
					SetPlayerInterior(index, 10);
					SetPlayerPos(index, 216.8014, 120.5791, 999.0156);
					SetPlayerFacingAngle(index, 183.3742);
					SetPlayerVirtualWorld(index, 25);
					SetPlayerHealth(index, 100);
					PlayerTextDrawSetString(index, playerData[index][playerJailTimerTD], " ");
					playerData[index][playerJailTime] = 0;
					KillTimer(playerData[index][jailTimer]);

					new Name[24], MsgAll[200];
					GetPlayerName(index, Name, sizeof(Name));

					for(new p; p < MAX_PLAYERS; p++)
					{
						new pName[24];
						GetPlayerName(p, pName, sizeof(pName));

						if(!strcmp(pName, Name))
						{
							SendClientMessage(p, COLOR_WHITE, "{58D3F7}[EASY STRETCH] {FFFFFF}You have been released from jail.");
						}
						else
						{
							format(MsgAll, sizeof(MsgAll), "{FFDC2E}[JAIL] {FFFFFF}%s(%i) has been released from jail {58D3F7}[Easy Stretch]{FFFFFF}", Name, index);
							SendClientMessage(p, COLOR_WHITE, MsgAll);
						}
					}

					savePlayerStats(index);

					disableAchieve(index);
					PlayerTextDrawShow(index, playerData[index][Achieve1]);
					PlayerTextDrawShow(index, playerData[index][Achieve2]);
					PlayerTextDrawShow(index, playerData[index][Achieve3]);
					PlayerTextDrawShow(index, playerData[index][Achieve4]);

					PlayerTextDrawSetString(index, playerData[index][Achieve3], "Redeemed Shop Item");
					PlayerTextDrawSetString(index, playerData[index][Achieve4], "You redeemed an item, thanks!");
					PlayerPlaySound(index, 1183 ,0.0, 0.0, 0.0);

					playerData[index][achieveTimer] = SetTimerEx("disableAchieve", 6000, false, "i", index);
				}
				else
				{
				    SendClientMessage(index, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You cannot redeem this code right now.");
				}
		    }

		    case 4: // XP/Score
		    {
		        if (serverInfo[doubleXP])
		        {
		        	playerGiveXP(index, 2500);
				}
				else
				{
				    playerGiveXP(index, 5000);
				}

				playerData[index][playerScore] = playerData[index][playerScore] + 1000;
				SetPlayerScore(index, playerData[index][playerScore]);

		        savePlayerStats(index);

		        SendClientMessage(index, COLOR_WHITE, "{58D3F7}[XP/SCORE PACK] {FFFFFF}XP and score has been added to your account.");

				disableAchieve(index);
				PlayerTextDrawShow(index, playerData[index][Achieve1]);
				PlayerTextDrawShow(index, playerData[index][Achieve2]);
				PlayerTextDrawShow(index, playerData[index][Achieve3]);
				PlayerTextDrawShow(index, playerData[index][Achieve4]);

				PlayerTextDrawSetString(index, playerData[index][Achieve3], "Redeemed Shop Item");
				PlayerTextDrawSetString(index, playerData[index][Achieve4], "You redeemed an item, thanks!");
				PlayerPlaySound(index, 1183 ,0.0, 0.0, 0.0);

				playerData[index][achieveTimer] = SetTimerEx("disableAchieve", 6000, false, "i", index);
		    }

		    case 101: // Code already redeemed
		    {
				format(string, sizeof(string), "%s{98B0CD}CNRSF Code Redemption Service\n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}{58D3F7}This code has already been redeemed. \n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}This code was already redeemed by a player.\n", string);
				format(string, sizeof(string), "%s{FFFFFF}If you believe this to be an error, please contact a shop admin.\n\n", string);

				format(string, sizeof(string), "%s{58D3F7}http://shop.sfcnr.in", string);

				ShowPlayerDialog(index, DIALOG_VIP_ALREADY, DIALOG_STYLE_MSGBOX, "Code Redemption", string, "OK", "");
		    }

		    case 102: // Code doesn't exist
		    {
				format(string, sizeof(string), "%s{98B0CD}CNRSF Code Redemption Service\n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}{58D3F7}Unable to find the redemption code. \n\n", string);
				format(string, sizeof(string), "%s{FFFFFF}The redemption code you entered is invalid.\n", string);
				format(string, sizeof(string), "%s{FFFFFF}Try entering it again, or contact a shop admin for assistance.\n\n", string);

				format(string, sizeof(string), "%s{58D3F7}http://shop.sfcnr.in", string);

				ShowPlayerDialog(index, DIALOG_VIP_ALREADY, DIALOG_STYLE_MSGBOX, "Code Redemption", string, "OK", "");
		    }
		}
    }
    else // Error whilst attempting to redeem code from store
    {
        SendClientMessage(index, COLOR_WHITE, "HTTP Error - Please try again later.");
    }
}

public OnMysqlError(error[], errorid, MySQL:handle)
{
	print(error);
	return 1;
}
CMD:updates(playerid, params[])
{
        SendClientMessage(playerid, COLOR_RED, "~~~~~~~~~~~~~~~~~~~~~~~~~~Server Updates~~~~~~~~~~~~~~~~~~~~~");
        SendClientMessage(playerid, COLOR_ADMIN_3, "1.Command /updates Added To Check New updates.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "2./toggleviewpms is replaced by /pmspy.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "3.admin chat has been replaced with the previous one.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "4.added /setlevel command for level 7 above.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "5.Changed admins with a new dialog.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "6.Changed viplist with a new dialog.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "7.Anti Advertisement is added in server now anyone cannot advertise here.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "8.Admin rank now have name.");
        SendClientMessage(playerid, COLOR_ADMIN_3, "___________________________________________________________________");
        SendClientMessage(playerid, COLOR_RED, "PM To Developers,Founder,Owners For More Information Ok.");
        return 1;
		}
//=======ANTI ADVERT SYSTEM========//
stock AntiAdv(playerid, text[])
{
    new strR[255], is1=0, r=0;
 	while(strlen(text[is1]))
 	{
  		if('0'<=text[is1]<='9')
  		{
	 		new is2=is1+1, p=0;
	   		while(p==0)
		  	{
		   		if('0'<=text[is2]<='9'&&strlen(text[is2]))
			   	{
				   is2++;
				}
			 	else
			  	{
				   	strmid(strR[r],text,is1,is2,255);
				   	if(strval(strR[r])<255) r++;
				    is1=is2;
				    p=1;
		    	}
		    }
	    }
    	is1++;
 	}
 	if(r>=4)
 	{
	  	new strMy[255];
	  	format(strMy, sizeof(strMy), "[{FF0000}Admin Warning{FFFFFF}]: {FFFF00}%s{FFFFFF} is attempting to Server Advertise: {FFFF00}%s{FFFFFF}", RPN(playerid), text);
  		SendMessageToAdmins(COLOR_WHITE, strMy);
	   	new pr2;
	  	for(new z=0;z<r;z++)
	  	{

		   	while((pr2=strfind(text,strR[z],true))!=-1)
			{
				for(new i=pr2,j=pr2+strlen(strR[z]);i<j;i++)
				{
					text[i]='*';
				}
			}
	  	}
	  	return 1;
 	}
 	return 0;
}

