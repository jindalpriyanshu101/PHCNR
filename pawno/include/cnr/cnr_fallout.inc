new
	Iterator:fallObject<MAX_FALLOBJ>;
new Float:gCoords[MAX_FALLOBJ][3] = {
	{ 700.37903, 501.99081, 70.00000 },
	{ 700.37903, 507.35080, 70.00000 },
	{ 700.37903, 512.71082, 70.00000 },
	{ 700.37903, 518.07080, 70.00000 },
	{ 700.37903, 523.43079, 70.00000 },
	{ 700.37903, 528.79077, 70.00000 },
	{ 700.37903, 534.15082, 70.00000 },
	{ 700.37903, 539.51080, 70.00000 },
	{ 700.37903, 544.87079, 70.00000 },
	{ 700.37903, 550.23077, 70.00000 },
	{ 700.37903, 555.59082, 70.00000 },
	{ 700.37903, 560.95081, 70.00000 },
	{ 700.37903, 566.31079, 70.00000 },
	{ 700.37903, 571.67078, 70.00000 },
	{ 695.91901, 501.99081, 70.00000 },
	{ 695.91901, 507.35080, 70.00000 },
	{ 695.91901, 512.71082, 70.00000 },
	{ 695.91901, 518.07080, 70.00000 },
	{ 695.91901, 523.43079, 70.00000 },
	{ 695.91901, 528.79077, 70.00000 },
	{ 695.91901, 534.15082, 70.00000 },
	{ 695.91901, 539.51080, 70.00000 },
	{ 695.91901, 544.87079, 70.00000 },
	{ 695.91901, 550.23077, 70.00000 },
	{ 695.91901, 555.59082, 70.00000 },
	{ 695.91901, 560.95081, 70.00000 },
	{ 695.91901, 566.31079, 70.00000 },
	{ 695.91901, 571.67078, 70.00000 },
	{ 691.45898, 501.99081, 70.00000 },
	{ 691.45898, 507.35080, 70.00000 },
	{ 691.45898, 512.71082, 70.00000 },
	{ 691.45898, 518.07080, 70.00000 },
	{ 691.45898, 523.43079, 70.00000 },
	{ 691.45898, 528.79077, 70.00000 },
	{ 691.45898, 534.15082, 70.00000 },
	{ 691.45898, 539.51080, 70.00000 },
	{ 691.45898, 544.87079, 70.00000 },
	{ 691.45898, 550.23077, 70.00000 },
	{ 691.45898, 555.59082, 70.00000 },
	{ 691.45898, 560.95081, 70.00000 },
	{ 691.45898, 566.31079, 70.00000 },
	{ 691.45898, 571.67078, 70.00000 },
	{ 686.99902, 501.99081, 70.00000 },
	{ 686.99902, 507.35080, 70.00000 },
	{ 686.99902, 512.71082, 70.00000 },
	{ 686.99902, 518.07080, 70.00000 },
	{ 686.99902, 523.43079, 70.00000 },
	{ 686.99902, 528.79077, 70.00000 },
	{ 686.99902, 534.15082, 70.00000 },
	{ 686.99902, 539.51080, 70.00000 },
	{ 686.99902, 544.87079, 70.00000 },
	{ 686.99902, 550.23077, 70.00000 },
	{ 686.99902, 555.59082, 70.00000 },
	{ 686.99902, 560.95081, 70.00000 },
	{ 686.99902, 566.31079, 70.00000 },
	{ 686.99902, 571.67078, 70.00000 },
	{ 682.53900, 501.99081, 70.00000 },
	{ 682.53900, 507.35080, 70.00000 },
	{ 682.53900, 512.71082, 70.00000 },
	{ 682.53900, 518.07080, 70.00000 },
	{ 682.53900, 523.43079, 70.00000 },
	{ 682.53900, 528.79077, 70.00000 },
	{ 682.53900, 534.15082, 70.00000 },
	{ 682.53900, 539.51080, 70.00000 },
	{ 682.53900, 544.87079, 70.00000 },
	{ 682.53900, 550.23077, 70.00000 },
	{ 682.53900, 555.59082, 70.00000 },
	{ 682.53900, 560.95081, 70.00000 },
	{ 682.53900, 566.31079, 70.00000 },
	{ 682.53900, 571.67078, 70.00000 },
	{ 678.07898, 501.99081, 70.00000 },
	{ 678.07898, 507.35080, 70.00000 },
	{ 678.07898, 512.71082, 70.00000 },
	{ 678.07898, 518.07080, 70.00000 },
	{ 678.07898, 523.43079, 70.00000 },
	{ 678.07898, 528.79077, 70.00000 },
	{ 678.07898, 534.15082, 70.00000 },
	{ 678.07898, 539.51080, 70.00000 },
	{ 678.07898, 544.87079, 70.00000 },
	{ 678.07898, 550.23077, 70.00000 },
	{ 678.07898, 555.59082, 70.00000 },
	{ 678.07898, 560.95081, 70.00000 },
	{ 682.53900, 560.95081, 70.00000 },
	{ 678.07898, 566.31079, 70.00000 },
	{ 678.07898, 571.67078, 70.00000 },
	{ 673.61902, 501.99081, 70.00000 },
	{ 673.61902, 507.35080, 70.00000 },
	{ 673.61902, 512.71082, 70.00000 },
	{ 673.61902, 518.07080, 70.00000 },
	{ 673.61902, 523.43079, 70.00000 },
	{ 673.61902, 528.79077, 70.00000 },
	{ 673.61902, 534.15082, 70.00000 },
	{ 673.61902, 539.51080, 70.00000 },
	{ 673.61902, 544.87079, 70.00000 },
	{ 673.61902, 550.23077, 70.00000 },
	{ 673.61902, 555.59082, 70.00000 },
	{ 673.61902, 560.95081, 70.00000 },
	{ 673.61902, 566.31079, 70.00000 },
	{ 673.61902, 571.67078, 70.00000 },
	{ 669.15900, 501.99081, 70.00000 },
	{ 669.15900, 507.35080, 70.00000 },
	{ 669.15900, 512.71082, 70.00000 },
	{ 669.15900, 518.07080, 70.00000 },
	{ 669.15900, 523.43079, 70.00000 },
	{ 669.15900, 528.79077, 70.00000 },
	{ 669.15900, 534.15082, 70.00000 },
	{ 669.15900, 539.51080, 70.00000 },
	{ 669.15900, 544.87079, 70.00000 },
	{ 669.15900, 550.23077, 70.00000 },
	{ 669.15900, 555.59082, 70.00000 },
	{ 669.15900, 560.95081, 70.00000 },
	{ 669.15900, 566.31079, 70.00000 },
	{ 669.15900, 571.67078, 70.00000 },
	{ 664.69897, 501.99081, 70.00000 },
	{ 664.69897, 507.35080, 70.00000 },
	{ 664.69897, 512.71082, 70.00000 },
	{ 664.69897, 518.07080, 70.00000 },
	{ 664.69897, 523.43079, 70.00000 },
	{ 664.69897, 528.79077, 70.00000 },
	{ 664.69897, 534.15082, 70.00000 },
	{ 664.69897, 539.51080, 70.00000 },
	{ 664.69897, 544.87079, 70.00000 },
	{ 664.69897, 550.23077, 70.00000 },
	{ 664.69897, 555.59082, 70.00000 },
	{ 664.69897, 560.95081, 70.00000 },
	{ 664.69897, 566.31079, 70.00000 },
	{ 664.69897, 571.67078, 70.00000 },
	{ 660.23901, 501.99081, 70.00000 },
	{ 660.23901, 507.35080, 70.00000 },
	{ 660.23901, 512.71082, 70.00000 },
	{ 660.23901, 518.07080, 70.00000 },
	{ 660.23901, 523.43079, 70.00000 },
	{ 660.23901, 528.79077, 70.00000 },
	{ 660.23901, 534.15082, 70.00000 },
	{ 660.23901, 539.51080, 70.00000 },
	{ 660.23901, 544.87079, 70.00000 },
	{ 660.23901, 550.23077, 70.00000 },
	{ 660.23901, 555.59082, 70.00000 },
	{ 660.23901, 560.95081, 70.00000 },
	{ 660.23901, 566.31079, 70.00000 },
	{ 660.23901, 571.67078, 70.00000 },
	{ 655.77899, 501.99081, 70.00000 },
	{ 655.77899, 507.35080, 70.00000 },
	{ 655.77899, 512.71082, 70.00000 },
	{ 655.77899, 518.07080, 70.00000 },
	{ 655.77899, 523.43079, 70.00000 },
	{ 655.77899, 528.79077, 70.00000 },
	{ 655.77899, 534.15082, 70.00000 },
	{ 655.77899, 539.51080, 70.00000 },
	{ 655.77899, 544.87079, 70.00000 },
	{ 655.77899, 550.23077, 70.00000 },
	{ 655.77899, 555.59082, 70.00000 },
	{ 655.77899, 560.95081, 70.00000 },
	{ 655.77899, 566.31079, 70.00000 },
	{ 655.77899, 571.67078, 70.00000 },
	{ 651.31897, 501.99081, 70.00000 },
	{ 651.31897, 507.35080, 70.00000 },
	{ 651.31897, 512.71082, 70.00000 },
	{ 651.31897, 518.07080, 70.00000 },
	{ 651.31897, 523.43079, 70.00000 },
	{ 651.31897, 528.79077, 70.00000 },
	{ 651.31897, 534.15082, 70.00000 },
	{ 651.31897, 539.51080, 70.00000 },
	{ 651.31897, 544.87079, 70.00000 },
	{ 651.31897, 550.23077, 70.00000 },
	{ 651.31897, 555.59082, 70.00000 },
	{ 651.31897, 560.95081, 70.00000 },
	{ 651.31897, 566.31079, 70.00000 },
	{ 651.31897, 571.67078, 70.00000 },
	{ 646.85901, 501.99081, 70.00000 },
	{ 646.85901, 507.35080, 70.00000 },
	{ 646.85901, 512.71082, 70.00000 },
	{ 646.85901, 518.07080, 70.00000 },
	{ 646.85901, 523.43079, 70.00000 },
	{ 646.85901, 528.79077, 70.00000 },
	{ 646.85901, 534.15082, 70.00000 },
	{ 646.85901, 539.51080, 70.00000 },
	{ 646.85901, 544.87079, 70.00000 },
	{ 646.85901, 550.23077, 70.00000 },
	{ 646.85901, 555.59082, 70.00000 },
	{ 646.85901, 560.95081, 70.00000 },
	{ 646.85901, 566.31079, 70.00000 },
	{ 646.85901, 571.67078, 70.00000 },
	{ 642.39899, 501.99081, 70.00000 },
	{ 642.39899, 507.35080, 70.00000 },
	{ 642.39899, 512.71082, 70.00000 },
	{ 642.39899, 518.07080, 70.00000 },
	{ 642.39899, 523.43079, 70.00000 },
	{ 642.39899, 528.79077, 70.00000 },
	{ 642.39899, 534.15082, 70.00000 },
	{ 642.39899, 539.51080, 70.00000 },
	{ 642.39899, 544.87079, 70.00000 },
	{ 642.39899, 550.23077, 70.00000 },
	{ 642.39899, 555.59082, 70.00000 },
	{ 642.39899, 560.95081, 70.00000 },
	{ 642.39899, 566.31079, 70.00000 },
	{ 642.39899, 571.67078, 70.00000 },
	{ 637.93903, 501.99081, 70.00000 },
	{ 637.93903, 507.35080, 70.00000 },
	{ 637.93903, 512.71082, 70.00000 },
	{ 637.93903, 518.07080, 70.00000 },
	{ 637.93903, 523.43079, 70.00000 },
	{ 637.93903, 528.79077, 70.00000 },
	{ 637.93903, 534.15082, 70.00000 },
	{ 637.93903, 539.51080, 70.00000 },
	{ 637.93903, 544.87079, 70.00000 },
	{ 637.93903, 550.23077, 70.00000 },
	{ 637.93903, 555.59082, 70.00000 },
	{ 637.93903, 560.95081, 70.00000 },
	{ 637.93903, 566.31079, 70.00000 },
	{ 637.93903, 571.67078, 70.00000 },
	{ 633.47900, 501.99081, 70.00000 },
	{ 633.47900, 507.35080, 70.00000 },
	{ 633.47900, 512.71082, 70.00000 },
	{ 633.47900, 518.07080, 70.00000 },
	{ 633.47900, 523.43079, 70.00000 },
	{ 633.47900, 528.79077, 70.00000 },
	{ 633.47900, 534.15082, 70.00000 },
	{ 633.47900, 539.51080, 70.00000 },
	{ 633.47900, 544.87079, 70.00000 },
	{ 633.47900, 550.23077, 70.00000 },
	{ 633.47900, 555.59082, 70.00000 },
	{ 633.47900, 560.95081, 70.00000 },
	{ 633.47900, 566.31079, 70.00000 },
	{ 633.47900, 571.67078, 70.00000 },
	{ 629.01898, 501.99081, 70.00000 },
	{ 629.01898, 507.35080, 70.00000 },
	{ 629.01898, 512.71082, 70.00000 },
	{ 629.01898, 518.07080, 70.00000 },
	{ 629.01898, 523.43079, 70.00000 },
	{ 629.01898, 528.79077, 70.00000 },
	{ 629.01898, 534.15082, 70.00000 },
	{ 629.01898, 539.51080, 70.00000 },
	{ 629.01898, 544.87079, 70.00000 },
	{ 629.01898, 550.23077, 70.00000 },
	{ 629.01898, 555.59082, 70.00000 },
	{ 629.01898, 560.95081, 70.00000 },
	{ 629.01898, 566.31079, 70.00000 },
	{ 629.01898, 571.67078, 70.00000 },
	{ 624.55902, 501.99081, 70.00000 },
	{ 624.55902, 507.35080, 70.00000 },
	{ 624.55902, 512.71082, 70.00000 },
	{ 624.55902, 518.07080, 70.00000 },
	{ 624.55902, 523.43079, 70.00000 },
	{ 624.55902, 528.79077, 70.00000 },
	{ 624.55902, 534.15082, 70.00000 },
	{ 624.55902, 539.51080, 70.00000 },
	{ 624.55902, 544.87079, 70.00000 },
	{ 624.55902, 550.23077, 70.00000 },
	{ 624.55902, 555.59082, 70.00000 },
	{ 624.55902, 560.95081, 70.00000 },
	{ 624.55902, 566.31079, 70.00000 },
	{ 624.55902, 571.67078, 70.00000 }
	
};

COMMAND:falloutevent(playerid, params[])
{
	if(playerData[playerid][playerLoggedIn])
	{
		if(playerData[playerid][playerLevel] >= 4)
		{
			new msg[512];
			if (serverInfo[falloutOpen])
			{
				format(msg, sizeof(msg), "{FF00FF}[FALLOUT]{FFffFF} Falout event has been closed.");
				TextDrawHideForAll(eventfallout);
				TextDrawHideForAll(event);
				SendClientMessageToAll(COLOR_WHITE, msg);
				serverInfo[falloutOpen] = false;
			}
			else
			{
				format(msg, sizeof(msg), "{FF00FF}[FALLOUT]{FFffFF} Fallout event has been started, type {00FFFF}/joinfallout{FFffFF} to join event.");
				TextDrawShowForAll(event);
				TextDrawShowForAll(eventfallout);
				SendClientMessageToAll(COLOR_WHITE, msg);
				serverInfo[falloutOpen] = true;
				GameTextForPlayer(playerid, "FALLOUT EVENT OPENED!", 5000, 5);
				for( new i; i < MAX_FALLOBJ; i++ )
				{
     				serverInfo[fallObject][i] = CreateDynamicObject(1697, gCoords[i][0], gCoords[i][1], gCoords[i][2], 31.79400, 0.000000, 0.000000, 185);
					Iter_Add(fallObject, i);
				}
			}
		}
		else
		{
			return 0;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You must be logged in to use commands.");
	}
		
	return 1;
}

COMMAND:startfallout(playerid, params[])
{
	if(playerData[playerid][playerLoggedIn])
	{
		if(playerData[playerid][playerLevel] >= 4)
		{
		    new bool:found = false;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && playerData[i][playerLoggedIn])
				{
					if (playerData[i][isInFallout])
					{
					    found = true;
						TogglePlayerControllable(i, 1);
						GameTextForPlayer(i, "EVENT STARTED!", 5000, 5);
					}
				}
			}
			for( new i; i < MAX_FALLOBJ; i++ )
			{
				Iter_Add(fallObject, i);
			}
			KillTimer(serverInfo[falloutTimer]);
			if(found)
				serverInfo[falloutTimer] = SetTimer("MinigameUpdate", 2500, 1 );
		}
		else
		{
			return 0;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You must be logged in to use commands.");
	}
		
	return 1;
}

COMMAND:joinfallout(playerid, params[])
{
	if(playerData[playerid][playerLoggedIn])
	{
		if (playerData[playerid][playerWantedLevel] == 0)
		{
			if (playerData[playerid][playerJailTime] < 1)
			{
				new msg[512];
				if (!playerData[playerid][isInFallout])
				{
					if (serverInfo[falloutOpen])
					{
						for (new i = 0; i < 13; i++)
						{
							GetPlayerWeaponData(playerid, i, playerData[playerid][previousWeapons][i], playerData[playerid][previousAmmoLots][i]);
						}
						playerData[playerid][previousVirtualWorld] = GetPlayerVirtualWorld(playerid);
						playerData[playerid][previousInteriorWorld] = GetPlayerInterior(playerid);

						GetPlayerHealth(playerid, playerData[playerid][previousHealth]);
						GetPlayerArmour(playerid, playerData[playerid][previousArmour]);
						GetPlayerPos(playerid, playerData[playerid][previousX], playerData[playerid][previousY], playerData[playerid][previousZ]);
						SetPlayerVirtualWorld(playerid, 185);
						ResetPlayerWeapons(playerid);
						TogglePlayerControllable(playerid, false);
						new spot = Iter_Random(fallObject);
						SetPlayerPos(playerid, gCoords[spot][0], gCoords[spot][1], gCoords[spot][2] +0.5 );
						Iter_Remove(fallObject, spot );
						format(msg, sizeof(msg), "{FF00FF}[FALLOUT]{FFffFF} You joined fallout event.");
						GameTextForPlayer(playerid, "~r~THE EVENT WILL START SHORTLY!!!", 10000, 5);
						SendClientMessage(playerid, COLOR_WHITE, msg);
						playerData[playerid][isInEvent] = true;
						playerData[playerid][isInFallout] = true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}There is no fallout event open right now.");
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}Please leave the minigames arena before joining the fallout event.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You cannot join events whilst jailed.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You cannot join events if you have a wanted level.");
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "{B7B7B7}[SERVER] {FFFFFF}You must be logged in to use commands.");
	}

	return 1;
}
	
		
COMMAND:destroyfallout(playerid, params[])
{
	if(playerData[playerid][playerLoggedIn])
	{
		if(playerData[playerid][playerLevel] >= 4)
		{
			for( new i; i < MAX_FALLOBJ; i++ )
			{
				DestroyDynamicObject(serverInfo[fallObject][i]);
				Iter_Clear(fallObject);
			}
			KillTimer(serverInfo[falloutTimer]);
			foreach(new i : Player)
			{
				if(playerData[i][isInFallout])
				{
					playerData[i][isInEvent] = false;
					playerData[i][isInFallout] = false;
				}
			}
		}
	}
	return 1;
}

forward MinigameUpdate();
public MinigameUpdate()
{
	new objectid = Iter_Random(fallObject), Float:ObjectX, Float:ObjectY, Float:ObjectZ;
	GetDynamicObjectPos(serverInfo[fallObject][objectid], ObjectX, ObjectY, ObjectZ );
	SetTimerEx("SpeedUp", 500, 0, "ifff", objectid, ObjectX, ObjectY, ObjectZ);
	MoveDynamicObject(serverInfo[fallObject][objectid], ObjectX, ObjectY, ObjectZ -10, 1 );
	Iter_Remove(fallObject, objectid );
	return 1;
}

forward SpeedUp( object, Float:x, Float:y, Float:z );
public SpeedUp( object, Float:x, Float:y, Float:z )
{
	MoveDynamicObject(serverInfo[fallObject][object], x, y, z -250, 50 );
	return 1;
}
